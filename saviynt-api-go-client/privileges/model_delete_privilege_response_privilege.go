/*
Privilege Management API

API for managing privileges in Saviynt/SSM. - **Create Privilege**: Creates a new privilege. - **Update Privilege**: Updates an existing privilege. - **Get Privilege List**: Returns a list of privileges based on search criteria. - **Delete Privilege**: Delete a privilege

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package privileges

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// DeletePrivilegeResponsePrivilege - struct for DeletePrivilegeResponsePrivilege
type DeletePrivilegeResponsePrivilege struct {
	DeletePrivilegeResponsePrivilegeOneOf *DeletePrivilegeResponsePrivilegeOneOf
	String                                *string
}

// DeletePrivilegeResponsePrivilegeOneOfAsDeletePrivilegeResponsePrivilege is a convenience function that returns DeletePrivilegeResponsePrivilegeOneOf wrapped in DeletePrivilegeResponsePrivilege
func DeletePrivilegeResponsePrivilegeOneOfAsDeletePrivilegeResponsePrivilege(v *DeletePrivilegeResponsePrivilegeOneOf) DeletePrivilegeResponsePrivilege {
	return DeletePrivilegeResponsePrivilege{
		DeletePrivilegeResponsePrivilegeOneOf: v,
	}
}

// stringAsDeletePrivilegeResponsePrivilege is a convenience function that returns string wrapped in DeletePrivilegeResponsePrivilege
func StringAsDeletePrivilegeResponsePrivilege(v *string) DeletePrivilegeResponsePrivilege {
	return DeletePrivilegeResponsePrivilege{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *DeletePrivilegeResponsePrivilege) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into DeletePrivilegeResponsePrivilegeOneOf
	err = newStrictDecoder(data).Decode(&dst.DeletePrivilegeResponsePrivilegeOneOf)
	if err == nil {
		jsonDeletePrivilegeResponsePrivilegeOneOf, _ := json.Marshal(dst.DeletePrivilegeResponsePrivilegeOneOf)
		if string(jsonDeletePrivilegeResponsePrivilegeOneOf) == "{}" { // empty struct
			dst.DeletePrivilegeResponsePrivilegeOneOf = nil
		} else {
			if err = validator.Validate(dst.DeletePrivilegeResponsePrivilegeOneOf); err != nil {
				dst.DeletePrivilegeResponsePrivilegeOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.DeletePrivilegeResponsePrivilegeOneOf = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.DeletePrivilegeResponsePrivilegeOneOf = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(DeletePrivilegeResponsePrivilege)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(DeletePrivilegeResponsePrivilege)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src DeletePrivilegeResponsePrivilege) MarshalJSON() ([]byte, error) {
	if src.DeletePrivilegeResponsePrivilegeOneOf != nil {
		return json.Marshal(&src.DeletePrivilegeResponsePrivilegeOneOf)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *DeletePrivilegeResponsePrivilege) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.DeletePrivilegeResponsePrivilegeOneOf != nil {
		return obj.DeletePrivilegeResponsePrivilegeOneOf
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj DeletePrivilegeResponsePrivilege) GetActualInstanceValue() interface{} {
	if obj.DeletePrivilegeResponsePrivilegeOneOf != nil {
		return *obj.DeletePrivilegeResponsePrivilegeOneOf
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableDeletePrivilegeResponsePrivilege struct {
	value *DeletePrivilegeResponsePrivilege
	isSet bool
}

func (v NullableDeletePrivilegeResponsePrivilege) Get() *DeletePrivilegeResponsePrivilege {
	return v.value
}

func (v *NullableDeletePrivilegeResponsePrivilege) Set(val *DeletePrivilegeResponsePrivilege) {
	v.value = val
	v.isSet = true
}

func (v NullableDeletePrivilegeResponsePrivilege) IsSet() bool {
	return v.isSet
}

func (v *NullableDeletePrivilegeResponsePrivilege) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeletePrivilegeResponsePrivilege(val *DeletePrivilegeResponsePrivilege) *NullableDeletePrivilegeResponsePrivilege {
	return &NullableDeletePrivilegeResponsePrivilege{value: val, isSet: true}
}

func (v NullableDeletePrivilegeResponsePrivilege) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeletePrivilegeResponsePrivilege) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
