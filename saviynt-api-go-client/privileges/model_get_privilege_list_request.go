/*
Privilege Management API

API for managing privileges in Saviynt/SSM. - **Create Privilege**: Creates a new privilege. - **Update Privilege**: Updates an existing privilege. - **Get Privilege List**: Returns a list of privileges based on search criteria. - **Delete Privilege**: Delete a privilege

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package privileges

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the GetPrivilegeListRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetPrivilegeListRequest{}

// GetPrivilegeListRequest struct for GetPrivilegeListRequest
type GetPrivilegeListRequest struct {
	// Endpoint name to search privilege
	Endpoint string `json:"endpoint"`
	// Entitlement type
	Entitlementtype *string `json:"entitlementtype,omitempty"`
	// Max number of results to return
	Max *string `json:"max,omitempty"`
	// Offset for the returned results
	Offset *string `json:"offset,omitempty"`
}

type _GetPrivilegeListRequest GetPrivilegeListRequest

// NewGetPrivilegeListRequest instantiates a new GetPrivilegeListRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetPrivilegeListRequest(endpoint string) *GetPrivilegeListRequest {
	this := GetPrivilegeListRequest{}
	this.Endpoint = endpoint
	return &this
}

// NewGetPrivilegeListRequestWithDefaults instantiates a new GetPrivilegeListRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetPrivilegeListRequestWithDefaults() *GetPrivilegeListRequest {
	this := GetPrivilegeListRequest{}
	return &this
}

// GetEndpoint returns the Endpoint field value
func (o *GetPrivilegeListRequest) GetEndpoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value
// and a boolean to check if the value has been set.
func (o *GetPrivilegeListRequest) GetEndpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Endpoint, true
}

// SetEndpoint sets field value
func (o *GetPrivilegeListRequest) SetEndpoint(v string) {
	o.Endpoint = v
}

// GetEntitlementtype returns the Entitlementtype field value if set, zero value otherwise.
func (o *GetPrivilegeListRequest) GetEntitlementtype() string {
	if o == nil || IsNil(o.Entitlementtype) {
		var ret string
		return ret
	}
	return *o.Entitlementtype
}

// GetEntitlementtypeOk returns a tuple with the Entitlementtype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPrivilegeListRequest) GetEntitlementtypeOk() (*string, bool) {
	if o == nil || IsNil(o.Entitlementtype) {
		return nil, false
	}
	return o.Entitlementtype, true
}

// HasEntitlementtype returns a boolean if a field has been set.
func (o *GetPrivilegeListRequest) HasEntitlementtype() bool {
	if o != nil && !IsNil(o.Entitlementtype) {
		return true
	}

	return false
}

// SetEntitlementtype gets a reference to the given string and assigns it to the Entitlementtype field.
func (o *GetPrivilegeListRequest) SetEntitlementtype(v string) {
	o.Entitlementtype = &v
}

// GetMax returns the Max field value if set, zero value otherwise.
func (o *GetPrivilegeListRequest) GetMax() string {
	if o == nil || IsNil(o.Max) {
		var ret string
		return ret
	}
	return *o.Max
}

// GetMaxOk returns a tuple with the Max field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPrivilegeListRequest) GetMaxOk() (*string, bool) {
	if o == nil || IsNil(o.Max) {
		return nil, false
	}
	return o.Max, true
}

// HasMax returns a boolean if a field has been set.
func (o *GetPrivilegeListRequest) HasMax() bool {
	if o != nil && !IsNil(o.Max) {
		return true
	}

	return false
}

// SetMax gets a reference to the given string and assigns it to the Max field.
func (o *GetPrivilegeListRequest) SetMax(v string) {
	o.Max = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *GetPrivilegeListRequest) GetOffset() string {
	if o == nil || IsNil(o.Offset) {
		var ret string
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetPrivilegeListRequest) GetOffsetOk() (*string, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *GetPrivilegeListRequest) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given string and assigns it to the Offset field.
func (o *GetPrivilegeListRequest) SetOffset(v string) {
	o.Offset = &v
}

func (o GetPrivilegeListRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetPrivilegeListRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["endpoint"] = o.Endpoint
	if !IsNil(o.Entitlementtype) {
		toSerialize["entitlementtype"] = o.Entitlementtype
	}
	if !IsNil(o.Max) {
		toSerialize["max"] = o.Max
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	return toSerialize, nil
}

func (o *GetPrivilegeListRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"endpoint",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGetPrivilegeListRequest := _GetPrivilegeListRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGetPrivilegeListRequest)

	if err != nil {
		return err
	}

	*o = GetPrivilegeListRequest(varGetPrivilegeListRequest)

	return err
}

type NullableGetPrivilegeListRequest struct {
	value *GetPrivilegeListRequest
	isSet bool
}

func (v NullableGetPrivilegeListRequest) Get() *GetPrivilegeListRequest {
	return v.value
}

func (v *NullableGetPrivilegeListRequest) Set(val *GetPrivilegeListRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGetPrivilegeListRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGetPrivilegeListRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetPrivilegeListRequest(val *GetPrivilegeListRequest) *NullableGetPrivilegeListRequest {
	return &NullableGetPrivilegeListRequest{value: val, isSet: true}
}

func (v NullableGetPrivilegeListRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetPrivilegeListRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
