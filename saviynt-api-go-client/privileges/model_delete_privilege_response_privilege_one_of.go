/*
Privilege Management API

API for managing privileges in Saviynt/SSM. - **Create Privilege**: Creates a new privilege. - **Update Privilege**: Updates an existing privilege. - **Get Privilege List**: Returns a list of privileges based on search criteria. - **Delete Privilege**: Delete a privilege 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package privileges

import (
	"encoding/json"
)

// checks if the DeletePrivilegeResponsePrivilegeOneOf type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeletePrivilegeResponsePrivilegeOneOf{}

// DeletePrivilegeResponsePrivilegeOneOf struct for DeletePrivilegeResponsePrivilegeOneOf
type DeletePrivilegeResponsePrivilegeOneOf struct {
	Privilegename *string `json:"privilegename,omitempty"`
}

// NewDeletePrivilegeResponsePrivilegeOneOf instantiates a new DeletePrivilegeResponsePrivilegeOneOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeletePrivilegeResponsePrivilegeOneOf() *DeletePrivilegeResponsePrivilegeOneOf {
	this := DeletePrivilegeResponsePrivilegeOneOf{}
	return &this
}

// NewDeletePrivilegeResponsePrivilegeOneOfWithDefaults instantiates a new DeletePrivilegeResponsePrivilegeOneOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeletePrivilegeResponsePrivilegeOneOfWithDefaults() *DeletePrivilegeResponsePrivilegeOneOf {
	this := DeletePrivilegeResponsePrivilegeOneOf{}
	return &this
}

// GetPrivilegename returns the Privilegename field value if set, zero value otherwise.
func (o *DeletePrivilegeResponsePrivilegeOneOf) GetPrivilegename() string {
	if o == nil || IsNil(o.Privilegename) {
		var ret string
		return ret
	}
	return *o.Privilegename
}

// GetPrivilegenameOk returns a tuple with the Privilegename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeletePrivilegeResponsePrivilegeOneOf) GetPrivilegenameOk() (*string, bool) {
	if o == nil || IsNil(o.Privilegename) {
		return nil, false
	}
	return o.Privilegename, true
}

// HasPrivilegename returns a boolean if a field has been set.
func (o *DeletePrivilegeResponsePrivilegeOneOf) HasPrivilegename() bool {
	if o != nil && !IsNil(o.Privilegename) {
		return true
	}

	return false
}

// SetPrivilegename gets a reference to the given string and assigns it to the Privilegename field.
func (o *DeletePrivilegeResponsePrivilegeOneOf) SetPrivilegename(v string) {
	o.Privilegename = &v
}

func (o DeletePrivilegeResponsePrivilegeOneOf) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeletePrivilegeResponsePrivilegeOneOf) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Privilegename) {
		toSerialize["privilegename"] = o.Privilegename
	}
	return toSerialize, nil
}

type NullableDeletePrivilegeResponsePrivilegeOneOf struct {
	value *DeletePrivilegeResponsePrivilegeOneOf
	isSet bool
}

func (v NullableDeletePrivilegeResponsePrivilegeOneOf) Get() *DeletePrivilegeResponsePrivilegeOneOf {
	return v.value
}

func (v *NullableDeletePrivilegeResponsePrivilegeOneOf) Set(val *DeletePrivilegeResponsePrivilegeOneOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDeletePrivilegeResponsePrivilegeOneOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDeletePrivilegeResponsePrivilegeOneOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeletePrivilegeResponsePrivilegeOneOf(val *DeletePrivilegeResponsePrivilegeOneOf) *NullableDeletePrivilegeResponsePrivilegeOneOf {
	return &NullableDeletePrivilegeResponsePrivilegeOneOf{value: val, isSet: true}
}

func (v NullableDeletePrivilegeResponsePrivilegeOneOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeletePrivilegeResponsePrivilegeOneOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


