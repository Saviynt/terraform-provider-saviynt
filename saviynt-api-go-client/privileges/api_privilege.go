/*
Privilege Management API

API for managing privileges in Saviynt/SSM. - **Create Privilege**: Creates a new privilege. - **Update Privilege**: Updates an existing privilege. - **Get Privilege List**: Returns a list of privileges based on search criteria. - **Delete Privilege**: Delete a privilege

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package privileges

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// PrivilegeAPIService PrivilegeAPI service
type PrivilegeAPIService service

type ApiCreatePrivilegeRequest struct {
	ctx                          context.Context
	ApiService                   *PrivilegeAPIService
	createUpdatePrivilegeRequest *CreateUpdatePrivilegeRequest
}

// Request payload for creating a privilege
func (r ApiCreatePrivilegeRequest) CreateUpdatePrivilegeRequest(createUpdatePrivilegeRequest CreateUpdatePrivilegeRequest) ApiCreatePrivilegeRequest {
	r.createUpdatePrivilegeRequest = &createUpdatePrivilegeRequest
	return r
}

func (r ApiCreatePrivilegeRequest) Execute() (*CreateUpdatePrivilegeResponse, *http.Response, error) {
	return r.ApiService.CreatePrivilegeExecute(r)
}

/*
CreatePrivilege Create a privilege

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreatePrivilegeRequest
*/
func (a *PrivilegeAPIService) CreatePrivilege(ctx context.Context) ApiCreatePrivilegeRequest {
	return ApiCreatePrivilegeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateUpdatePrivilegeResponse
func (a *PrivilegeAPIService) CreatePrivilegeExecute(r ApiCreatePrivilegeRequest) (*CreateUpdatePrivilegeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateUpdatePrivilegeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivilegeAPIService.CreatePrivilege")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ECM/api/v5/createPrivilege"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createUpdatePrivilegeRequest == nil {
		return localVarReturnValue, nil, reportError("createUpdatePrivilegeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createUpdatePrivilegeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeletePrivilegeRequest struct {
	ctx                    context.Context
	ApiService             *PrivilegeAPIService
	deletePrivilegeRequest *DeletePrivilegeRequest
}

// Request payload for deleting a privilege
func (r ApiDeletePrivilegeRequest) DeletePrivilegeRequest(deletePrivilegeRequest DeletePrivilegeRequest) ApiDeletePrivilegeRequest {
	r.deletePrivilegeRequest = &deletePrivilegeRequest
	return r
}

func (r ApiDeletePrivilegeRequest) Execute() (*DeletePrivilegeResponse, *http.Response, error) {
	return r.ApiService.DeletePrivilegeExecute(r)
}

/*
DeletePrivilege Delete a privilege

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDeletePrivilegeRequest
*/
func (a *PrivilegeAPIService) DeletePrivilege(ctx context.Context) ApiDeletePrivilegeRequest {
	return ApiDeletePrivilegeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return DeletePrivilegeResponse
func (a *PrivilegeAPIService) DeletePrivilegeExecute(r ApiDeletePrivilegeRequest) (*DeletePrivilegeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodDelete
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DeletePrivilegeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivilegeAPIService.DeletePrivilege")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ECM/api/v5/deletePrivilege"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deletePrivilegeRequest == nil {
		return localVarReturnValue, nil, reportError("deletePrivilegeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deletePrivilegeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetPrivilegeRequest struct {
	ctx                     context.Context
	ApiService              *PrivilegeAPIService
	getPrivilegeListRequest *GetPrivilegeListRequest
}

// Request payload for getting the list of privileges
func (r ApiGetPrivilegeRequest) GetPrivilegeListRequest(getPrivilegeListRequest GetPrivilegeListRequest) ApiGetPrivilegeRequest {
	r.getPrivilegeListRequest = &getPrivilegeListRequest
	return r
}

func (r ApiGetPrivilegeRequest) Execute() (*GetPrivilegeListResponse, *http.Response, error) {
	return r.ApiService.GetPrivilegeExecute(r)
}

/*
GetPrivilege Get a list of privileges

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetPrivilegeRequest
*/
func (a *PrivilegeAPIService) GetPrivilege(ctx context.Context) ApiGetPrivilegeRequest {
	return ApiGetPrivilegeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return GetPrivilegeListResponse
func (a *PrivilegeAPIService) GetPrivilegeExecute(r ApiGetPrivilegeRequest) (*GetPrivilegeListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetPrivilegeListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivilegeAPIService.GetPrivilege")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ECM/api/v5/getListofPrivileges"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.getPrivilegeListRequest == nil {
		return localVarReturnValue, nil, reportError("getPrivilegeListRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.getPrivilegeListRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdatePrivilegeRequest struct {
	ctx                          context.Context
	ApiService                   *PrivilegeAPIService
	createUpdatePrivilegeRequest *CreateUpdatePrivilegeRequest
}

// Request payload for updating a privilege
func (r ApiUpdatePrivilegeRequest) CreateUpdatePrivilegeRequest(createUpdatePrivilegeRequest CreateUpdatePrivilegeRequest) ApiUpdatePrivilegeRequest {
	r.createUpdatePrivilegeRequest = &createUpdatePrivilegeRequest
	return r
}

func (r ApiUpdatePrivilegeRequest) Execute() (*CreateUpdatePrivilegeResponse, *http.Response, error) {
	return r.ApiService.UpdatePrivilegeExecute(r)
}

/*
UpdatePrivilege Update a privilege

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUpdatePrivilegeRequest
*/
func (a *PrivilegeAPIService) UpdatePrivilege(ctx context.Context) ApiUpdatePrivilegeRequest {
	return ApiUpdatePrivilegeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateUpdatePrivilegeResponse
func (a *PrivilegeAPIService) UpdatePrivilegeExecute(r ApiUpdatePrivilegeRequest) (*CreateUpdatePrivilegeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateUpdatePrivilegeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PrivilegeAPIService.UpdatePrivilege")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ECM/api/v5/updatePrivilege"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createUpdatePrivilegeRequest == nil {
		return localVarReturnValue, nil, reportError("createUpdatePrivilegeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createUpdatePrivilegeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
