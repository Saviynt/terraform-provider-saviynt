// Copyright (c) 2025 Saviynt Inc.
// SPDX-License-Identifier: MPL-2.0

/*
Saviynt Privileges API

Testing PrivilegeAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package test

import (
	"context"
	"fmt"
	"strings"
	"testing"
	"time"

	saviyntapigoclient "github.com/saviynt/saviynt-api-go-client"
	"github.com/saviynt/saviynt-api-go-client/privileges"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestPrivilegesAPIService(t *testing.T) {
	apiClient, _, skipTests, skipMsg, err := client()
	require.Nil(t, err)

	ctx := context.Background()

	uniqueName := fmt.Sprintf("TestPrivilege_%d", time.Now().Unix())
	endpoint := "sample-102"
	entitlementtype := "ui_ent_type_1"
	securitysystem := "shaleenhuddle"

	t.Run("Test CreatePrivileges", func(t *testing.T) {
		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		createReqBody := privileges.CreateUpdatePrivilegeRequest{
			Endpoint: endpoint,
			Entitlementtype: entitlementtype,
			Securitysystem: securitysystem,
			Privilege: privileges.CreateUpdatePrivilegeRequestPrivilege{
				Attributename: saviyntapigoclient.Pointer(uniqueName),
				Attributetype: saviyntapigoclient.Pointer("STRING"),
				Attributeconfig: saviyntapigoclient.Pointer("USER-BASED"),
			},
		}

		createReq := apiClient.Privileges.CreatePrivilege(ctx).CreateUpdatePrivilegeRequest(createReqBody)

		createResp, createHttpResp, err := createReq.Execute()
		if err != nil {
			fmt.Printf("Error calling create privilege: %v\n", err)
			return
		}

		require.Nil(t, err)
		require.NotNil(t, createResp)
		assert.Equal(t, 200, createHttpResp.StatusCode)
		assert.Equal(t, int32(0), *createResp.Errorcode)
		assert.Equal(t, "Success", *createResp.Msg)
		require.NotNil(t, createResp.Entitlementtypeprivilegekey)
	})

	t.Run("Test UpdatePrivileges", func(t *testing.T) {
		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		updateReqBody := privileges.CreateUpdatePrivilegeRequest{
			Endpoint: endpoint,
			Entitlementtype: entitlementtype,
			Securitysystem: securitysystem,
			Privilege: privileges.CreateUpdatePrivilegeRequestPrivilege{
				Attributename: saviyntapigoclient.Pointer(uniqueName),
				Attributetype: saviyntapigoclient.Pointer("BOOLEAN"),
				Attributeconfig: saviyntapigoclient.Pointer("ENTITLEMENT-BASED"),
				Orderindex: saviyntapigoclient.Pointer("2"),
				Hideoncreate: saviyntapigoclient.Pointer(true),
			},
		}

		updateReq := apiClient.Privileges.UpdatePrivilege(ctx).CreateUpdatePrivilegeRequest(updateReqBody)

		updateResp, updateHttpResp, err := updateReq.Execute()

		require.Nil(t, err)
		require.NotNil(t, updateResp)
		assert.Equal(t, 200, updateHttpResp.StatusCode)
		assert.Equal(t, int32(0), *updateResp.Errorcode)
		assert.Equal(t, "Success", *updateResp.Msg)
	})

	t.Run("Test GetPrivilegesList", func(t *testing.T) {
		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		getReqBody := privileges.GetPrivilegeListRequest{
			Endpoint: endpoint,
			Offset: saviyntapigoclient.Pointer("2"),
		}

		getReq := apiClient.Privileges.GetPrivilege(ctx).GetPrivilegeListRequest(getReqBody)

		getResp, getHttpResp, err := getReq.Execute()

		require.Nil(t, err)
		require.NotNil(t, getResp)
		assert.Equal(t, 200, getHttpResp.StatusCode)
		assert.GreaterOrEqual(t, *getResp.DisplayCount, int32(1))
		assert.GreaterOrEqual(t, *getResp.TotalCount, int32(1))
	})

	t.Run("Test DeletePrivileges", func(t *testing.T) {
		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		deleteReqBody := privileges.DeletePrivilegeRequest{
			Securitysystem: securitysystem,
			Endpoint: endpoint,
			Entitlementtype: entitlementtype,
			Privilege: uniqueName,
		}

		deleteReq := apiClient.Privileges.DeletePrivilege(ctx).DeletePrivilegeRequest(deleteReqBody)

		deleteResp, deleteHttpResp, err := deleteReq.Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, deleteHttpResp.StatusCode)
		assert.Equal(t, int32(0), *deleteResp.Errorcode)
		assert.Equal(t, "Success", *deleteResp.Msg)
	})
}
