/*
 * Copyright (c) 2025 Saviynt Inc.
 * All Rights Reserved.
 *
 * This software is the confidential and proprietary information of
 * Saviynt Inc. ("Confidential Information"). You shall not disclose,
 * use, or distribute such Confidential Information except in accordance
 * with the terms of the license agreement you entered into with Saviynt.
 *
 * SAVIYNT MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
 * THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE, OR NON-INFRINGEMENT.
 */

/*
Saviynt DynamicAttributes API

Testing DynamicAttributesAPIService
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package test

import (
	"context"
	"strings"
	"testing"

	"github.com/saviynt/saviynt-api-go-client/dynamicattributes"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestDynamicAttributesAPIService(t *testing.T) {
	apiClient, _, skipTests, skipMsg, err := client()
	require.Nil(t, err)

	ctx := context.Background()

	system_name := "shaleenhuddle"
	endpoint := "sample-103"
	user_name := "admin"
	update_user := "admin"

	dynamicAttr1 := dynamicattributes.CreateDynamicAttributesInner{
		Attributename: "sample_dynamic_attribute_3",
		Requesttype:   "SERVICE ACCOUNT",
	}

	dynamicAttr2 := dynamicattributes.CreateDynamicAttributesInner{
		Attributename: "sample_dynamic_attribute_4",
		Requesttype:   "SERVICE ACCOUNT",
	}

	t.Run("Test CreateDynamicAttributes", func(t *testing.T) {
		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		createReq := dynamicattributes.CreateDynamicAttributeRequest{
			Securitysystem:    system_name,
			Endpoint:          endpoint,
			Updateuser:        user_name,
			Dynamicattributes: []dynamicattributes.CreateDynamicAttributesInner{dynamicAttr1, dynamicAttr2},
		}

		req := apiClient.DynamicAttributes.CreateDynamicAttribute(ctx).CreateDynamicAttributeRequest(createReq)
		resp, httpResp, err := req.Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpResp.StatusCode)
		assert.Equal(t, "0", *resp.Errorcode)
		assert.Equal(t, "Success", *resp.Msg)
	})

	t.Run("Test UpdateDynamicAttributes", func(t *testing.T) {
		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		requestable := "true"
		reqType := "ACCOUNT"
		updatedDyn1 := dynamicattributes.UpdateDynamicAttributesInner{
			Attributename: "sample_dynamic_attribute_3",
			Required:      &requestable,
		}
		updatedDyn2 := dynamicattributes.UpdateDynamicAttributesInner{
			Attributename: "sample_dynamic_attribute_4",
			Requesttype:   &reqType,
		}

		updateReq := dynamicattributes.UpdateDynamicAttributeRequest{
			Securitysystem:    "shaleenhuddle",
			Endpoint:          "sample-103",
			Updateuser:        update_user,
			Dynamicattributes: []dynamicattributes.UpdateDynamicAttributesInner{updatedDyn1, updatedDyn2},
		}

		req := apiClient.DynamicAttributes.UpdateDynamicAttribute(ctx).UpdateDynamicAttributeRequest(updateReq)
		resp, httpResp, err := req.Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpResp.StatusCode)
		assert.Equal(t, "0", *resp.Errorcode)
		assert.Equal(t, "Success", *resp.Msg)
	})

	t.Run("Test FetchDynamicAttributes", func(t *testing.T) {
		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		req := apiClient.DynamicAttributes.FetchDynamicAttribute(ctx).Securitysystem([]string{system_name}).Endpoint([]string{endpoint})
		resp, httpResp, err := req.Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpResp.StatusCode)
		assert.Greater(t, int(*resp.Displaycount), 0, "Displaycount should be greater than 0")
		assert.Greater(t, int(*resp.Totalcount), 0, "Totalcount should be greater than 0")

		require.NotEmpty(t, resp.Dynamicattributes, "dynamicattributes should not be empty")
	})

	t.Run("Test DeleteDynamicAttributes", func(t *testing.T) {
		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		deleteReq := dynamicattributes.DeleteDynamicAttributeRequest{
			Securitysystem:    system_name,
			Endpoint:          endpoint,
			Updateuser:        update_user,
			Dynamicattributes: []string{"sample_dynamic_attribute_3"},
		}

		req := apiClient.DynamicAttributes.DeleteDynamicAttribute(ctx).DeleteDynamicAttributeRequest(deleteReq)
		resp, httpResp, err := req.Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpResp.StatusCode)
		assert.Equal(t, "0", *resp.Errorcode)
		assert.Equal(t, "success", *resp.Msg)
	})
}
