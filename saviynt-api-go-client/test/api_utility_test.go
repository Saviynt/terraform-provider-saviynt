// Copyright (c) Saviynt Inc.
// SPDX-License-Identifier: MPL-2.0

/*
Saviynt API

Testing UtilityAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package test

import (
	"context"
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_utility_UtilityAPIService(t *testing.T) {

	apiClient, _, skipTests, skipMsg, err := client()
	require.Nil(t, err)

	ctx := context.Background()

	t.Run("Test UtilityAPIService AccessToken", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		// Get refresh token from the client's OAuth2 token
		token := apiClient.Token()
		require.NotNil(t, token, "OAuth2 token should not be nil")
		require.NotEmpty(t, token.RefreshToken, "Refresh token should not be empty")

		resp, httpRes, err := apiClient.Utility.AccessToken(ctx).
			GrantType("refresh_token").
			RefreshToken(token.RefreshToken).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

		// Validate response structure
		if resp.AccessToken != nil {
			assert.NotEmpty(t, *resp.AccessToken)
		}
		if resp.TokenType != nil {
			assert.Equal(t, "Bearer", *resp.TokenType)
		}
		if resp.ExpiresIn != nil {
			assert.Greater(t, *resp.ExpiresIn, int32(0))
		}
	})

	t.Run("Test UtilityAPIService GetEcmVersion", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		resp, httpRes, err := apiClient.Utility.GetEcmVersion(ctx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

		// Validate response structure
		assert.NotNil(t, resp.Version)
	})

	t.Run("Test UtilityAPIService AccessToken - Invalid Request", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		// Test with empty request body

		_, httpRes, err := apiClient.Utility.AccessToken(ctx).
			GrantType("").RefreshToken("").Execute()

		// Should handle error gracefully
		if err != nil {
			assert.NotEqual(t, 200, httpRes.StatusCode)
		}
	})

}
