/*
Saviynt API

Testing JobControlAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package test

import (
	"context"
	"strings"
	"testing"

	openapiclient "github.com/saviynt/saviynt-api-go-client/job_control"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_job_control_JobControlAPIService(t *testing.T) {

	apiClient, _, skipTests, skipMsg, err := client()
	require.Nil(t, err)

	ctx := context.Background()

	t.Run("Test JobControlAPIService CreateTrigger - SchemaUserJob", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		request := []openapiclient.JobTriggerRequest{
			{
				Triggers: []openapiclient.JobTriggerItem{
					openapiclient.SchemaUserJobAsJobTriggerItem(&openapiclient.SchemaUserJob{
						BaseJobTrigger: openapiclient.BaseJobTrigger{
							Name:     *openapiclient.PtrString("test_schema_user"),
							JobName:  *openapiclient.PtrString("SchemaUserJob"),
							JobGroup: *openapiclient.PtrString("Schema"),
							Group:    *openapiclient.PtrString("GRAILS_JOBS"),
							CronExp:  *openapiclient.PtrString("0 0/15 * * * ?"),
						},
						ValueMap: &openapiclient.SchemaUserJobAllOfValueMap{
							SchemaFileNames: openapiclient.PtrString("Users.sav"),
						},
					}),
				},
			},
		}

		resp, httpRes, err := apiClient.JobControl.CreateTrigger(ctx).JobTriggerRequest(request).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobControlAPIService CreateTrigger - SchemaAccountJob", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		request := []openapiclient.JobTriggerRequest{
			{
				Triggers: []openapiclient.JobTriggerItem{
					openapiclient.SchemaAccountJobAsJobTriggerItem(&openapiclient.SchemaAccountJob{
						BaseJobTrigger: openapiclient.BaseJobTrigger{
							Name:     *openapiclient.PtrString("test_schema_account"),
							JobName:  *openapiclient.PtrString("SchemaAccountJob"),
							JobGroup: *openapiclient.PtrString("Schema"),
							Group:    *openapiclient.PtrString("GRAILS_JOBS"),
							CronExp:  *openapiclient.PtrString("0 0/25 * * * ?"),
						},
						ValueMap: &openapiclient.SchemaAccountJobAllOfValueMap{
							SchemaFileNames: openapiclient.PtrString("ConnScrumACCOUNTS.sav"),
						},
					}),
				},
			},
		}

		resp, httpRes, err := apiClient.JobControl.CreateTrigger(ctx).JobTriggerRequest(request).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobControlAPIService CreateTrigger - SchemaRoleJob", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		request := []openapiclient.JobTriggerRequest{
			{
				Triggers: []openapiclient.JobTriggerItem{
					openapiclient.SchemaRoleJobAsJobTriggerItem(&openapiclient.SchemaRoleJob{
						BaseJobTrigger: openapiclient.BaseJobTrigger{
							Name:     *openapiclient.PtrString("test_schema_role"),
							JobName:  *openapiclient.PtrString("SchemaRoleJob"),
							JobGroup: *openapiclient.PtrString("Schema"),
							Group:    *openapiclient.PtrString("GRAILS_JOBS"),
							CronExp:  *openapiclient.PtrString("0 0/20 * * * ?"),
						},
						ValueMap: &openapiclient.SchemaRoleJobAllOfValueMap{
							SchemaFileNames: openapiclient.PtrString("ROLES.sav,CONNROLES.sav"),
						},
					}),
				},
			},
		}

		resp, httpRes, err := apiClient.JobControl.CreateTrigger(ctx).JobTriggerRequest(request).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobControlAPIService CreateTrigger - AccountsImportIncrementalJob", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		request := []openapiclient.JobTriggerRequest{
			{
				Triggers: []openapiclient.JobTriggerItem{
					openapiclient.AccountsImportIncrementalJobAsJobTriggerItem(&openapiclient.AccountsImportIncrementalJob{
						BaseJobTrigger: openapiclient.BaseJobTrigger{
							Name:     *openapiclient.PtrString("test_accounts_incremental"),
							JobName:  *openapiclient.PtrString("AccountsImportIncrementalJob"),
							JobGroup: *openapiclient.PtrString("DATABASE"),
							Group:    *openapiclient.PtrString("GRAILS_JOBS"),
							CronExp:  *openapiclient.PtrString("0 33 14 * * ? 2060"),
						},
						ValueMap: &openapiclient.AccountsImportIncrementalJobAllOfValueMap{
							CONNECTION: openapiclient.PtrString("Privileged_Application"),
						},
					}),
				},
			},
		}

		resp, httpRes, err := apiClient.JobControl.CreateTrigger(ctx).JobTriggerRequest(request).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test JobControlAPIService CreateUpdateTrigger - WSBlockingRetryJob", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		request := openapiclient.CreateOrUpdateTriggersRequest{
			Triggers: []openapiclient.TriggerItem{
				openapiclient.WSRetryJobAsTriggerItem(&openapiclient.WSRetryJob{
					BaseTrigger: openapiclient.BaseTrigger{
						Triggername:    *openapiclient.PtrString("test_ws_retry_test"),
						Jobname:        *openapiclient.PtrString("WSBlockingRetryJob"),
						Cronexpression: *openapiclient.PtrString("0 0/5 * * * ?"),
						Jobgroup:       *openapiclient.PtrString("utility"),
					},
					Securitysystems: []string{"job_control_security_system"},
					Tasktypes:       openapiclient.PtrString("1,2,3"),
				}),
			},
		}

		resp, httpRes, err := apiClient.JobControl.CreateUpdateTrigger(ctx).CreateOrUpdateTriggersRequest(request).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "Success", resp.Msg)
		assert.Equal(t, "0", resp.ErrorCode)

	})

	t.Run("Test JobControlAPIService CreateUpdateTrigger - UserImportJob", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		request := openapiclient.CreateOrUpdateTriggersRequest{
			Triggers: []openapiclient.TriggerItem{
				openapiclient.UserImportJobAsTriggerItem(&openapiclient.UserImportJob{
					BaseTrigger: openapiclient.BaseTrigger{
						Triggername:    *openapiclient.PtrString("test_user_import"),
						Jobname:        *openapiclient.PtrString("UserImportJob"),
						Cronexpression: *openapiclient.PtrString("0 0 1 * * ?"),
						Jobgroup:       *openapiclient.PtrString("DATA"),
					},
					ValueMap: &openapiclient.UserImportJobAllOfValueMap{
						Externalconn:                       *openapiclient.PtrString("4"),
						Fullorincremental:                  openapiclient.PtrString("full"),
						UserNotInFeedAction:                openapiclient.PtrString("INACTIVATE"),
						UserOperationsAllowed:              openapiclient.PtrString("CREATE,UPDATE"),
						ZeroDayProvisioning:                openapiclient.PtrString("true"),
						GenerateSystemUsername:             openapiclient.PtrString("true"),
						GenerateEmail:                      openapiclient.PtrString("true"),
						CheckRules:                         openapiclient.PtrString("true"),
						BuildUserMap:                       openapiclient.PtrString("true"),
						UserThreshold:                      openapiclient.PtrString("1000"),
						OnFailure:                          openapiclient.PtrString("continue"),
						ZeroDayLimit:                       openapiclient.PtrString("100"),
						TermUserLimit:                      openapiclient.PtrString("50"),
						Importsavconnect:                   openapiclient.PtrString("true"),
						Exporttosavcloud:                   openapiclient.PtrString("false"),
						UserReconcillationField:            openapiclient.PtrString("firstname"),
						UserDefaultSavRole:                 openapiclient.PtrString("ROLE_ADMIN"),
						UserStatusConfig:                   openapiclient.PtrString("active"),
						EndpointsToAssociateOrphanAccounts: openapiclient.PtrString("role_testing,sample-102"),
					},
				}),
			},
		}

		resp, httpRes, err := apiClient.JobControl.CreateUpdateTrigger(ctx).CreateOrUpdateTriggersRequest(request).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "Success", resp.Msg)
		assert.Equal(t, "0", resp.ErrorCode)

	})

	t.Run("Test JobControlAPIService CreateUpdateTrigger - ApplicationDataImportJob", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		request := openapiclient.CreateOrUpdateTriggersRequest{
			Triggers: []openapiclient.TriggerItem{
				openapiclient.ApplicationDataImportJobAsTriggerItem(&openapiclient.ApplicationDataImportJob{
					BaseTrigger: openapiclient.BaseTrigger{
						Triggername:    *openapiclient.PtrString("test_app_data_import"),
						Jobname:        *openapiclient.PtrString("ApplicationDataImportJob"),
						Cronexpression: *openapiclient.PtrString("0 0 2 * * ?"),
						Jobgroup:       *openapiclient.PtrString("Data"),
					},
					ValueMap: &openapiclient.ApplicationDataImportJobAllOfValueMap{
						Securitysystems:   []string{"job_control_security_system"},
						Accountsoraccess:  *openapiclient.PtrString("access"),
						Externalconn:      *openapiclient.PtrString("4"),
						Fullorincremental: *openapiclient.PtrString("full"),
					},
				}),
			},
		}

		resp, httpRes, err := apiClient.JobControl.CreateUpdateTrigger(ctx).CreateOrUpdateTriggersRequest(request).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "Success", resp.Msg)
		assert.Equal(t, "0", resp.ErrorCode)

	})

	t.Run("Test JobControlAPIService CreateUpdateTrigger - EcmJob", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		request := openapiclient.CreateOrUpdateTriggersRequest{
			Triggers: []openapiclient.TriggerItem{
				openapiclient.EcmJobAsTriggerItem(&openapiclient.EcmJob{
					BaseTrigger: openapiclient.BaseTrigger{
						Triggername:    *openapiclient.PtrString("test_ecm_job"),
						Jobname:        *openapiclient.PtrString("EcmJob"),
						Cronexpression: *openapiclient.PtrString("0 0 3 * * ?"),
						Jobgroup:       *openapiclient.PtrString("ecmGroup"),
					},
					ValueMap: &openapiclient.EcmJobAllOfValueMap{
						OnFailure: openapiclient.PtrString("continue"),
					},
				}),
			},
		}

		resp, httpRes, err := apiClient.JobControl.CreateUpdateTrigger(ctx).CreateOrUpdateTriggersRequest(request).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "Success", resp.Msg)
		assert.Equal(t, "0", resp.ErrorCode)

	})

	t.Run("Test JobControlAPIService CreateUpdateTrigger - EcmSapUserJob", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		request := openapiclient.CreateOrUpdateTriggersRequest{
			Triggers: []openapiclient.TriggerItem{
				openapiclient.EcmSapUserJobAsTriggerItem(&openapiclient.EcmSapUserJob{
					BaseTrigger: openapiclient.BaseTrigger{
						Triggername:    *openapiclient.PtrString("test_ecm_sap_user"),
						Jobname:        *openapiclient.PtrString("EcmSapUserJob"),
						Cronexpression: *openapiclient.PtrString("0 0 4 * * ?"),
						Jobgroup:       *openapiclient.PtrString("ecmGroup"),
					},
					ValueMap: &openapiclient.EcmJobAllOfValueMap{
						OnFailure: openapiclient.PtrString("continue"),
					},
				}),
			},
		}

		resp, httpRes, err := apiClient.JobControl.CreateUpdateTrigger(ctx).CreateOrUpdateTriggersRequest(request).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "Success", resp.Msg)
		assert.Equal(t, "0", resp.ErrorCode)

	})
	t.Run("Test JobControlAPIService CreateUpdateTrigger - AccountsImportFullJob", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		request := openapiclient.CreateOrUpdateTriggersRequest{
			Triggers: []openapiclient.TriggerItem{
				openapiclient.AccountsImportFullJobAsTriggerItem(&openapiclient.AccountsImportFullJob{
					BaseTrigger: openapiclient.BaseTrigger{
						Triggername:    *openapiclient.PtrString("test_accounts_full"),
						Jobname:        *openapiclient.PtrString("AccountsImportFullJob"),
						Cronexpression: *openapiclient.PtrString("0 0 5 * * ?"),
						Jobgroup:       *openapiclient.PtrString("DATABASE"),
						Triggergroup:   openapiclient.PtrString("GRAILS_JOBS"),
					},
					ValueMap: &openapiclient.AccountsImportFullJobAllOfValueMap{
						Connectionname: *openapiclient.PtrString("Privileged_Application"),
					},
				}),
			},
		}

		resp, httpRes, err := apiClient.JobControl.CreateUpdateTrigger(ctx).CreateOrUpdateTriggersRequest(request).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "Success", resp.Msg)
		assert.Equal(t, "0", resp.ErrorCode)

	})
	t.Run("Test JobControlAPIService CheckJobStatus", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		request := openapiclient.CheckJobStatusRequest{
			Jobname:     "WSBlockingRetryJob",
			Jobgroup:    *openapiclient.PtrString("utility"),
			Triggername: openapiclient.PtrString("test_ws_retry_test"),
		}

		resp, httpRes, err := apiClient.JobControl.CheckJobStatus(ctx).CheckJobStatusRequest(request).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "0", resp.ErrorCode)

	})

	t.Run("Test JobControlAPIService ResumeAllJobs", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		resp, httpRes, err := apiClient.JobControl.ResumeAllJobs(ctx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.NotNil(t, resp.Message)
		assert.Contains(t, resp.Message, "resume")

	})

	t.Run("Test JobControlAPIService RunJobTrigger", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		request := openapiclient.RunJobTriggerRequest{
			Jobname:     "EcmJob",
			Triggername: "test_ecm_job",
			Jobgroup:    "ecmGroup",
		}

		resp, httpRes, err := apiClient.JobControl.RunJobTrigger(ctx).RunJobTriggerRequest(request).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, "0", resp.ErrorCode)
		assert.NotNil(t, resp.Timestamp)

	})
	t.Run("Test JobControlAPIService PauseJob", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		request := openapiclient.PauseResumeJobRequest{
			Triggername: "test_schema_user",
		}

		resp, httpRes, err := apiClient.JobControl.PauseJob(ctx).PauseResumeJobRequest(request).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.NotNil(t, resp.Message)
		assert.Contains(t, resp.Message, "Pause")

	})
	t.Run("Test JobControlAPIService ResumeJob", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		request := openapiclient.PauseResumeJobRequest{
			Triggername: "test_schema_user",
		}

		resp, httpRes, err := apiClient.JobControl.ResumeJob(ctx).PauseResumeJobRequest(request).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.NotNil(t, resp.Message)
		assert.Contains(t, resp.Message, "Resume")

	})

	t.Run("Test JobControlAPIService DeleteTrigger - WSBlockingRetryJob", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		request := openapiclient.DeleteTriggerRequest{
			Jobname:     "WSBlockingRetryJob",
			Triggername: *openapiclient.PtrString("test_ws_retry_test"),
			Jobgroup:    *openapiclient.PtrString("utility"),
		}

		resp, httpRes, err := apiClient.JobControl.DeleteTrigger(ctx).DeleteTriggerRequest(request).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, int32(0), resp.ErrorCode)

	})

	t.Run("Test JobControlAPIService DeleteTrigger - UserImportJob", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		request := openapiclient.DeleteTriggerRequest{
			Jobname:     "UserImportJob",
			Triggername: *openapiclient.PtrString("test_user_import"),
			Jobgroup:    *openapiclient.PtrString("DATA"),
		}

		resp, httpRes, err := apiClient.JobControl.DeleteTrigger(ctx).DeleteTriggerRequest(request).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, int32(0), resp.ErrorCode)

	})

	t.Run("Test JobControlAPIService DeleteTrigger - ApplicationDataImportJob", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		request := openapiclient.DeleteTriggerRequest{
			Jobname:     "ApplicationDataImportJob",
			Triggername: *openapiclient.PtrString("test_app_data_import"),
			Jobgroup:    *openapiclient.PtrString("Data"),
		}

		resp, httpRes, err := apiClient.JobControl.DeleteTrigger(ctx).DeleteTriggerRequest(request).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, int32(0), resp.ErrorCode)

	})

	t.Run("Test JobControlAPIService DeleteTrigger - EcmJob", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		request := openapiclient.DeleteTriggerRequest{
			Jobname:     "EcmJob",
			Triggername: *openapiclient.PtrString("test_ecm_job"),
			Jobgroup:    *openapiclient.PtrString("ecmGroup"),
		}

		resp, httpRes, err := apiClient.JobControl.DeleteTrigger(ctx).DeleteTriggerRequest(request).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, int32(0), resp.ErrorCode)

	})

	t.Run("Test JobControlAPIService DeleteTrigger - EcmSapUserJob", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		request := openapiclient.DeleteTriggerRequest{
			Jobname:     "EcmSapUserJob",
			Triggername: *openapiclient.PtrString("test_ecm_sap_user"),
			Jobgroup:    *openapiclient.PtrString("ecmGroup"),
		}

		resp, httpRes, err := apiClient.JobControl.DeleteTrigger(ctx).DeleteTriggerRequest(request).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, int32(0), resp.ErrorCode)

	})

	t.Run("Test JobControlAPIService DeleteTrigger - AccountsImportFullJob", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		request := openapiclient.DeleteTriggerRequest{
			Jobname:     "AccountsImportFullJob",
			Triggername: *openapiclient.PtrString("test_accounts_full"),
			Jobgroup:    *openapiclient.PtrString("DATABASE"),
		}

		resp, httpRes, err := apiClient.JobControl.DeleteTrigger(ctx).DeleteTriggerRequest(request).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, int32(0), resp.ErrorCode)

	})

	t.Run("Test JobControlAPIService DeleteTrigger - SchemaUserJob", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		request := openapiclient.DeleteTriggerRequest{
			Jobname:     "SchemaUserJob",
			Triggername: *openapiclient.PtrString("test_schema_user"),
			Jobgroup:    *openapiclient.PtrString("Schema"),
		}

		resp, httpRes, err := apiClient.JobControl.DeleteTrigger(ctx).DeleteTriggerRequest(request).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, int32(0), resp.ErrorCode)

	})

	t.Run("Test JobControlAPIService DeleteTrigger - SchemaAccountJob", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		request := openapiclient.DeleteTriggerRequest{
			Jobname:     "SchemaAccountJob",
			Triggername: *openapiclient.PtrString("test_schema_account"),
			Jobgroup:    *openapiclient.PtrString("Schema"),
		}

		resp, httpRes, err := apiClient.JobControl.DeleteTrigger(ctx).DeleteTriggerRequest(request).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, int32(0), resp.ErrorCode)

	})

	t.Run("Test JobControlAPIService DeleteTrigger - SchemaRoleJob", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		request := openapiclient.DeleteTriggerRequest{
			Jobname:     "SchemaRoleJob",
			Triggername: *openapiclient.PtrString("test_schema_role"),
			Jobgroup:    *openapiclient.PtrString("Schema"),
		}

		resp, httpRes, err := apiClient.JobControl.DeleteTrigger(ctx).DeleteTriggerRequest(request).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, int32(0), resp.ErrorCode)

	})

	t.Run("Test JobControlAPIService DeleteTrigger - AccountsImportIncrementalJob", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		request := openapiclient.DeleteTriggerRequest{
			Jobname:     "AccountsImportIncrementalJob",
			Triggername: *openapiclient.PtrString("test_accounts_incremental"),
			Jobgroup:    *openapiclient.PtrString("DATABASE"),
		}

		resp, httpRes, err := apiClient.JobControl.DeleteTrigger(ctx).DeleteTriggerRequest(request).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, int32(0), resp.ErrorCode)

	})

	t.Run("Test JobControlAPIService FetchJobMetadata", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		request := openapiclient.FetchJobMetadataRequest{
			Jobname:     "EcmJob",
			Triggername: openapiclient.PtrString("test_ecm_job"),
			Jobgroup:    openapiclient.PtrString("ecmGroup"),
		}

		resp, httpRes, err := apiClient.JobControl.FetchJobMetadata(ctx).FetchJobMetadataRequest(request).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Equal(t, int32(0), resp.ErrorCode)
		assert.NotNil(t, resp.Result)

	})

	t.Run("Test JobControlAPIService PauseAllJobs", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		resp, httpRes, err := apiClient.JobControl.PauseAllJobs(ctx).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.NotNil(t, resp.Message)
		assert.Contains(t, resp.Message, "paused")

	})

	t.Run("Test JobControlAPIService ResumePauseJobs", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		request := openapiclient.PauseResumeJobsRequest{
			Action:      "PAUSE",
			Triggername: openapiclient.PtrString("test_schema_user"),
			Jobname:     openapiclient.PtrString("SchemaUserJob"),
		}

		resp, httpRes, err := apiClient.JobControl.ResumePauseJobs(ctx).PauseResumeJobsRequest(request).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Contains(t, resp, "Paused")

	})

	t.Run("Test JobControlAPIService ResumePauseJobs - Resume", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		request := openapiclient.PauseResumeJobsRequest{
			Action:      "RESUME",
			Triggername: openapiclient.PtrString("test_schema_user"),
			Jobname:     openapiclient.PtrString("SchemaUserJob"),
		}

		resp, httpRes, err := apiClient.JobControl.ResumePauseJobs(ctx).PauseResumeJobsRequest(request).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
		assert.Contains(t, resp, "Resumed")

	})

}
