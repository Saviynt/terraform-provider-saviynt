// Copyright (c) 2025 Saviynt Inc.
// SPDX-License-Identifier: MPL-2.0

/*
Saviynt API

Testing RolesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package test

import (
	"context"
	"strings"
	"testing"

	"github.com/saviynt/saviynt-api-go-client/roles"
	"github.com/saviynt/saviynt-api-go-client/util/rolesutil"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_roles_RolesAPIService(t *testing.T) {
	apiClient, _, skipTests, skipMsg, err := client()
	require.Nil(t, err)
	ctx := context.Background()
	roleName := rolesutil.RoleNameUsingTimeStamp("TestRole")
	ownerName := "admin"
	requestor := "admin"
	updateType := "REMOVE"
	rank := "1"
	endpointName := "Shaleen_testing_terraform"
	endpointValue := "DBAdmin"
	endpointType := "DBAccess"
	endpoint := "Shaleen_testing_terraform"
	secondUpdateType := "ADD"
	customProperty9 := "CustomProperty9Value"
	customProperty10 := "CustomProperty10Value"
	t.Run("Test RolesAPIService Addrole", func(t *testing.T) {
		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}
		req := roles.AddOrRemoveRoleRequest{
			Username: "00000001",
			Rolename: roleName,
		}
		resp, httpRes, err := apiClient.Roles.
			Addrole(ctx).
			AddOrRemoveRoleRequest(req).
			Execute()
		require.Nil(t, err)
		require.NotNil(t, httpRes)
		assert.Equal(t, 200, httpRes.StatusCode)
		require.NotNil(t, resp)
	})

	t.Run("Test RolesAPIService CreateEnterpriseRoleRequest", func(t *testing.T) {
		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		req := roles.CreateEnterpriseRoleRequest{
			Roletype:  "ENTERPRISE",
			RoleName:  roleName,
			Requestor: "admin",
			Owner: []roles.CreateRoleOwnerPayload{
				{
					OwnerName: &ownerName,
					Rank:      &rank,
				},
			},
		}
		resp, httpRes, err := apiClient.Roles.
			CreateEnterpriseRoleRequest(ctx).
			CreateEnterpriseRoleRequest(req).
			Execute()
		require.Nil(t, err)
		require.NotNil(t, httpRes)
		assert.Equal(t, 200, httpRes.StatusCode)
		require.NotNil(t, resp)

	})

	t.Run("Test RolesAPIService GetFireFighterRoles", func(t *testing.T) {
		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		// Call the GetFireFighterRoles API
		resp, httpRes, err := apiClient.Roles.
			GetFireFighterRoles(ctx).
			Execute()

		// Validate the response
		require.Nil(t, err)
		require.NotNil(t, httpRes)
		assert.Equal(t, 200, httpRes.StatusCode)
		require.NotNil(t, resp)

	})

	t.Run("Test RolesAPIService GetRoles", func(t *testing.T) {
		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}
		req := roles.GetRolesRequest{
			RoleName: &roleName,
		}
		resp, httpRes, err := apiClient.Roles.
			GetRoles(ctx).
			GetRolesRequest(req).
			Execute()
		require.Nil(t, err)
		require.NotNil(t, httpRes)
		assert.Equal(t, 200, httpRes.StatusCode)
		require.NotNil(t, resp)
	})

	t.Run("Test RolesAPIService Removerole", func(t *testing.T) {
		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		req := roles.AddOrRemoveRoleRequest{
			Username: "00000001",
			Rolename: roleName,
		}

		resp, httpRes, err := apiClient.Roles.
			Removerole(ctx).
			AddOrRemoveRoleRequest(req).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, httpRes)
		assert.Equal(t, 200, httpRes.StatusCode)
		require.NotNil(t, resp)

	})

	t.Run("Test RolesAPIService UpdateEnterpriseRoleRequest", func(t *testing.T) {

		if skipTests && strings.TrimSpace(skipMsg) != "" {
			t.Skip(skipMsg)
		} else if skipTests {
			t.Skip(MsgSkipTest)
		}

		updateReq := roles.UpdateEnterpriseRoleRequest{
			Roletype:  "ENTERPRISE",
			RoleName:  roleName,
			Requestor: &requestor,
			Owner: []roles.UpdateRoleOwnerPayload{
				{OwnerName: &ownerName, UpdateType: &updateType},
			},
			Endpointname: &endpointName,
			Entitlements: []roles.UpdateEntitlementPayload{
				{
					EntitlementValue: &endpointValue,
					EntitlementType:  &endpointType,
					Endpoint:         &endpoint,
					UpdateType:       &secondUpdateType,
				},
			},
			Customproperty9:  &customProperty9,
			Customproperty10: &customProperty10,
		}

		resp, httpRes, err := apiClient.Roles.
			UpdateEnterpriseRoleRequest(ctx).
			UpdateEnterpriseRoleRequest(updateReq).
			Execute()

		require.Nil(t, err)
		require.NotNil(t, httpRes)
		assert.Equal(t, 200, httpRes.StatusCode)
		require.NotNil(t, resp)

	})

}
