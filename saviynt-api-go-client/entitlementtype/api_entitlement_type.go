/*
Entitlement Type Management API

API for managing entitlement types in Saviynt/SSM. - **Create Entitlement Type**: Creates a new entitlement type. - **Update Entitlement Type**: Updates an existing entitlement type. - **Get Entitlement Type List**: Returns a list of entitlement types based on search criteria.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package entitlementtype

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

// EntitlementTypeAPIService EntitlementTypeAPI service
type EntitlementTypeAPIService service

type ApiCreateEntitlementTypeRequest struct {
	ctx                          context.Context
	ApiService                   *EntitlementTypeAPIService
	createEntitlementTypeRequest *CreateEntitlementTypeRequest
}

// Request payload for creating an entitlement type
func (r ApiCreateEntitlementTypeRequest) CreateEntitlementTypeRequest(createEntitlementTypeRequest CreateEntitlementTypeRequest) ApiCreateEntitlementTypeRequest {
	r.createEntitlementTypeRequest = &createEntitlementTypeRequest
	return r
}

func (r ApiCreateEntitlementTypeRequest) Execute() (*CreateOrUpdateEntitlementTypeResponse, *http.Response, error) {
	return r.ApiService.CreateEntitlementTypeExecute(r)
}

/*
CreateEntitlementType Create an entitlement type

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateEntitlementTypeRequest
*/
func (a *EntitlementTypeAPIService) CreateEntitlementType(ctx context.Context) ApiCreateEntitlementTypeRequest {
	return ApiCreateEntitlementTypeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateOrUpdateEntitlementTypeResponse
func (a *EntitlementTypeAPIService) CreateEntitlementTypeExecute(r ApiCreateEntitlementTypeRequest) (*CreateOrUpdateEntitlementTypeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateOrUpdateEntitlementTypeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntitlementTypeAPIService.CreateEntitlementType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ECM/api/v5/createEntitlementType"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createEntitlementTypeRequest == nil {
		return localVarReturnValue, nil, reportError("createEntitlementTypeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createEntitlementTypeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetEntitlementTypeRequest struct {
	ctx             context.Context
	ApiService      *EntitlementTypeAPIService
	entitlementname *string
	max             *string
	offset          *string
	endpointname    *string
}

// Name of entitlement type
func (r ApiGetEntitlementTypeRequest) Entitlementname(entitlementname string) ApiGetEntitlementTypeRequest {
	r.entitlementname = &entitlementname
	return r
}

// Maximum number of results to return
func (r ApiGetEntitlementTypeRequest) Max(max string) ApiGetEntitlementTypeRequest {
	r.max = &max
	return r
}

// Offset for pagination
func (r ApiGetEntitlementTypeRequest) Offset(offset string) ApiGetEntitlementTypeRequest {
	r.offset = &offset
	return r
}

// Name of the endpoint to get entitlement types for
func (r ApiGetEntitlementTypeRequest) Endpointname(endpointname string) ApiGetEntitlementTypeRequest {
	r.endpointname = &endpointname
	return r
}

func (r ApiGetEntitlementTypeRequest) Execute() (*GetEntitlementTypeResponse, *http.Response, error) {
	return r.ApiService.GetEntitlementTypeExecute(r)
}

/*
GetEntitlementType Get a list of entitlement types

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetEntitlementTypeRequest
*/
func (a *EntitlementTypeAPIService) GetEntitlementType(ctx context.Context) ApiGetEntitlementTypeRequest {
	return ApiGetEntitlementTypeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return GetEntitlementTypeResponse
func (a *EntitlementTypeAPIService) GetEntitlementTypeExecute(r ApiGetEntitlementTypeRequest) (*GetEntitlementTypeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GetEntitlementTypeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntitlementTypeAPIService.GetEntitlementType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ECM/api/v5/getEntitlementTypes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.entitlementname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "entitlementname", r.entitlementname, "form", "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.endpointname != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endpointname", r.endpointname, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateEntitlementTypeRequest struct {
	ctx                          context.Context
	ApiService                   *EntitlementTypeAPIService
	updateEntitlementTypeRequest *UpdateEntitlementTypeRequest
}

// Request payload for updating an entitlement type
func (r ApiUpdateEntitlementTypeRequest) UpdateEntitlementTypeRequest(updateEntitlementTypeRequest UpdateEntitlementTypeRequest) ApiUpdateEntitlementTypeRequest {
	r.updateEntitlementTypeRequest = &updateEntitlementTypeRequest
	return r
}

func (r ApiUpdateEntitlementTypeRequest) Execute() (*CreateOrUpdateEntitlementTypeResponse, *http.Response, error) {
	return r.ApiService.UpdateEntitlementTypeExecute(r)
}

/*
UpdateEntitlementType Update an entitlement type

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiUpdateEntitlementTypeRequest
*/
func (a *EntitlementTypeAPIService) UpdateEntitlementType(ctx context.Context) ApiUpdateEntitlementTypeRequest {
	return ApiUpdateEntitlementTypeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return CreateOrUpdateEntitlementTypeResponse
func (a *EntitlementTypeAPIService) UpdateEntitlementTypeExecute(r ApiUpdateEntitlementTypeRequest) (*CreateOrUpdateEntitlementTypeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPut
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *CreateOrUpdateEntitlementTypeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EntitlementTypeAPIService.UpdateEntitlementType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ECM/api/v5/updateEntitlementType"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateEntitlementTypeRequest == nil {
		return localVarReturnValue, nil, reportError("updateEntitlementTypeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateEntitlementTypeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
