/*
Connection Management API

Use this API to create a connection in Saviynt Identity Cloud.  The Authorization header must have \"Bearer {token}\".  **Mandatory Parameters:** - **connectionname**: Specify the name to identify the connection. - **connectiontype**: Specify a connection type. For example, if your target application is Active Directory, specify the connection type as \"AD\".  **Optional Parameters:** - **description**: Provide a description for the connection. - **defaultsavroles**: Specify the SAV role(s) required for managing this connection along with its associated security systems, endpoints, accounts, and entitlements. - **emailTemplate**: Specify the email template applicable for notifications. - **sslCertificate**: Specify the SSL certificate(s) to secure the connection between EIC and the target application. - **vaultConfiguration**: Specify the path of the vault to obtain secret data (suffix the connector name to make it unique). - **saveinvault**: Set to true to save the encrypted attribute in the configured vault.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connections

import (
	"encoding/json"
)

// checks if the OktaConnectionAttributes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OktaConnectionAttributes{}

// OktaConnectionAttributes struct for OktaConnectionAttributes
type OktaConnectionAttributes struct {
	IMPORTURL *string `json:"IMPORTURL,omitempty"`
	AUTHTOKEN *string `json:"AUTHTOKEN,omitempty"`
	IsTimeoutSupported *bool `json:"isTimeoutSupported,omitempty"`
	OKTA_GROUPS_FILTER *string `json:"OKTA_GROUPS_FILTER,omitempty"`
	ACCOUNTFIELDMAPPINGS *string `json:"ACCOUNTFIELDMAPPINGS,omitempty"`
	IMPORT_INACTIVE_APPS *string `json:"IMPORT_INACTIVE_APPS,omitempty"`
	AUDIT_FILTER *string `json:"AUDIT_FILTER,omitempty"`
	USERFIELDMAPPINGS *string `json:"USERFIELDMAPPINGS,omitempty"`
	APPACCOUNTFIELDMAPPINGS *string `json:"APPACCOUNTFIELDMAPPINGS,omitempty"`
	MODIFYUSERDATAJSON *string `json:"MODIFYUSERDATAJSON,omitempty"`
	ConnectionTimeoutConfig *ConnectionTimeoutConfig `json:"connectionTimeoutConfig,omitempty"`
	ConnectionType *string `json:"connectionType,omitempty"`
	IsTimeoutConfigValidated *bool `json:"isTimeoutConfigValidated,omitempty"`
	ACTIVATE_ENDPOINT *string `json:"ACTIVATE_ENDPOINT,omitempty"`
	ENTITLEMENTTYPESMAPPINGS *string `json:"ENTITLEMENTTYPESMAPPINGS,omitempty"`
	OKTA_APPLICATION_SECURITYSYSTEM *string `json:"OKTA_APPLICATION_SECURITYSYSTEM,omitempty"`
	PAM_CONFIG *string `json:"PAM_CONFIG,omitempty"`
	ConfigJSON *string `json:"ConfigJSON,omitempty"`
	STATUS_THRESHOLD_CONFIG *string `json:"STATUS_THRESHOLD_CONFIG,omitempty"`
}

// NewOktaConnectionAttributes instantiates a new OktaConnectionAttributes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOktaConnectionAttributes() *OktaConnectionAttributes {
	this := OktaConnectionAttributes{}
	return &this
}

// NewOktaConnectionAttributesWithDefaults instantiates a new OktaConnectionAttributes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOktaConnectionAttributesWithDefaults() *OktaConnectionAttributes {
	this := OktaConnectionAttributes{}
	return &this
}

// GetIMPORTURL returns the IMPORTURL field value if set, zero value otherwise.
func (o *OktaConnectionAttributes) GetIMPORTURL() string {
	if o == nil || IsNil(o.IMPORTURL) {
		var ret string
		return ret
	}
	return *o.IMPORTURL
}

// GetIMPORTURLOk returns a tuple with the IMPORTURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnectionAttributes) GetIMPORTURLOk() (*string, bool) {
	if o == nil || IsNil(o.IMPORTURL) {
		return nil, false
	}
	return o.IMPORTURL, true
}

// HasIMPORTURL returns a boolean if a field has been set.
func (o *OktaConnectionAttributes) HasIMPORTURL() bool {
	if o != nil && !IsNil(o.IMPORTURL) {
		return true
	}

	return false
}

// SetIMPORTURL gets a reference to the given string and assigns it to the IMPORTURL field.
func (o *OktaConnectionAttributes) SetIMPORTURL(v string) {
	o.IMPORTURL = &v
}

// GetAUTHTOKEN returns the AUTHTOKEN field value if set, zero value otherwise.
func (o *OktaConnectionAttributes) GetAUTHTOKEN() string {
	if o == nil || IsNil(o.AUTHTOKEN) {
		var ret string
		return ret
	}
	return *o.AUTHTOKEN
}

// GetAUTHTOKENOk returns a tuple with the AUTHTOKEN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnectionAttributes) GetAUTHTOKENOk() (*string, bool) {
	if o == nil || IsNil(o.AUTHTOKEN) {
		return nil, false
	}
	return o.AUTHTOKEN, true
}

// HasAUTHTOKEN returns a boolean if a field has been set.
func (o *OktaConnectionAttributes) HasAUTHTOKEN() bool {
	if o != nil && !IsNil(o.AUTHTOKEN) {
		return true
	}

	return false
}

// SetAUTHTOKEN gets a reference to the given string and assigns it to the AUTHTOKEN field.
func (o *OktaConnectionAttributes) SetAUTHTOKEN(v string) {
	o.AUTHTOKEN = &v
}

// GetIsTimeoutSupported returns the IsTimeoutSupported field value if set, zero value otherwise.
func (o *OktaConnectionAttributes) GetIsTimeoutSupported() bool {
	if o == nil || IsNil(o.IsTimeoutSupported) {
		var ret bool
		return ret
	}
	return *o.IsTimeoutSupported
}

// GetIsTimeoutSupportedOk returns a tuple with the IsTimeoutSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnectionAttributes) GetIsTimeoutSupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTimeoutSupported) {
		return nil, false
	}
	return o.IsTimeoutSupported, true
}

// HasIsTimeoutSupported returns a boolean if a field has been set.
func (o *OktaConnectionAttributes) HasIsTimeoutSupported() bool {
	if o != nil && !IsNil(o.IsTimeoutSupported) {
		return true
	}

	return false
}

// SetIsTimeoutSupported gets a reference to the given bool and assigns it to the IsTimeoutSupported field.
func (o *OktaConnectionAttributes) SetIsTimeoutSupported(v bool) {
	o.IsTimeoutSupported = &v
}

// GetOKTA_GROUPS_FILTER returns the OKTA_GROUPS_FILTER field value if set, zero value otherwise.
func (o *OktaConnectionAttributes) GetOKTA_GROUPS_FILTER() string {
	if o == nil || IsNil(o.OKTA_GROUPS_FILTER) {
		var ret string
		return ret
	}
	return *o.OKTA_GROUPS_FILTER
}

// GetOKTA_GROUPS_FILTEROk returns a tuple with the OKTA_GROUPS_FILTER field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnectionAttributes) GetOKTA_GROUPS_FILTEROk() (*string, bool) {
	if o == nil || IsNil(o.OKTA_GROUPS_FILTER) {
		return nil, false
	}
	return o.OKTA_GROUPS_FILTER, true
}

// HasOKTA_GROUPS_FILTER returns a boolean if a field has been set.
func (o *OktaConnectionAttributes) HasOKTA_GROUPS_FILTER() bool {
	if o != nil && !IsNil(o.OKTA_GROUPS_FILTER) {
		return true
	}

	return false
}

// SetOKTA_GROUPS_FILTER gets a reference to the given string and assigns it to the OKTA_GROUPS_FILTER field.
func (o *OktaConnectionAttributes) SetOKTA_GROUPS_FILTER(v string) {
	o.OKTA_GROUPS_FILTER = &v
}

// GetACCOUNTFIELDMAPPINGS returns the ACCOUNTFIELDMAPPINGS field value if set, zero value otherwise.
func (o *OktaConnectionAttributes) GetACCOUNTFIELDMAPPINGS() string {
	if o == nil || IsNil(o.ACCOUNTFIELDMAPPINGS) {
		var ret string
		return ret
	}
	return *o.ACCOUNTFIELDMAPPINGS
}

// GetACCOUNTFIELDMAPPINGSOk returns a tuple with the ACCOUNTFIELDMAPPINGS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnectionAttributes) GetACCOUNTFIELDMAPPINGSOk() (*string, bool) {
	if o == nil || IsNil(o.ACCOUNTFIELDMAPPINGS) {
		return nil, false
	}
	return o.ACCOUNTFIELDMAPPINGS, true
}

// HasACCOUNTFIELDMAPPINGS returns a boolean if a field has been set.
func (o *OktaConnectionAttributes) HasACCOUNTFIELDMAPPINGS() bool {
	if o != nil && !IsNil(o.ACCOUNTFIELDMAPPINGS) {
		return true
	}

	return false
}

// SetACCOUNTFIELDMAPPINGS gets a reference to the given string and assigns it to the ACCOUNTFIELDMAPPINGS field.
func (o *OktaConnectionAttributes) SetACCOUNTFIELDMAPPINGS(v string) {
	o.ACCOUNTFIELDMAPPINGS = &v
}

// GetIMPORT_INACTIVE_APPS returns the IMPORT_INACTIVE_APPS field value if set, zero value otherwise.
func (o *OktaConnectionAttributes) GetIMPORT_INACTIVE_APPS() string {
	if o == nil || IsNil(o.IMPORT_INACTIVE_APPS) {
		var ret string
		return ret
	}
	return *o.IMPORT_INACTIVE_APPS
}

// GetIMPORT_INACTIVE_APPSOk returns a tuple with the IMPORT_INACTIVE_APPS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnectionAttributes) GetIMPORT_INACTIVE_APPSOk() (*string, bool) {
	if o == nil || IsNil(o.IMPORT_INACTIVE_APPS) {
		return nil, false
	}
	return o.IMPORT_INACTIVE_APPS, true
}

// HasIMPORT_INACTIVE_APPS returns a boolean if a field has been set.
func (o *OktaConnectionAttributes) HasIMPORT_INACTIVE_APPS() bool {
	if o != nil && !IsNil(o.IMPORT_INACTIVE_APPS) {
		return true
	}

	return false
}

// SetIMPORT_INACTIVE_APPS gets a reference to the given string and assigns it to the IMPORT_INACTIVE_APPS field.
func (o *OktaConnectionAttributes) SetIMPORT_INACTIVE_APPS(v string) {
	o.IMPORT_INACTIVE_APPS = &v
}

// GetAUDIT_FILTER returns the AUDIT_FILTER field value if set, zero value otherwise.
func (o *OktaConnectionAttributes) GetAUDIT_FILTER() string {
	if o == nil || IsNil(o.AUDIT_FILTER) {
		var ret string
		return ret
	}
	return *o.AUDIT_FILTER
}

// GetAUDIT_FILTEROk returns a tuple with the AUDIT_FILTER field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnectionAttributes) GetAUDIT_FILTEROk() (*string, bool) {
	if o == nil || IsNil(o.AUDIT_FILTER) {
		return nil, false
	}
	return o.AUDIT_FILTER, true
}

// HasAUDIT_FILTER returns a boolean if a field has been set.
func (o *OktaConnectionAttributes) HasAUDIT_FILTER() bool {
	if o != nil && !IsNil(o.AUDIT_FILTER) {
		return true
	}

	return false
}

// SetAUDIT_FILTER gets a reference to the given string and assigns it to the AUDIT_FILTER field.
func (o *OktaConnectionAttributes) SetAUDIT_FILTER(v string) {
	o.AUDIT_FILTER = &v
}

// GetUSERFIELDMAPPINGS returns the USERFIELDMAPPINGS field value if set, zero value otherwise.
func (o *OktaConnectionAttributes) GetUSERFIELDMAPPINGS() string {
	if o == nil || IsNil(o.USERFIELDMAPPINGS) {
		var ret string
		return ret
	}
	return *o.USERFIELDMAPPINGS
}

// GetUSERFIELDMAPPINGSOk returns a tuple with the USERFIELDMAPPINGS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnectionAttributes) GetUSERFIELDMAPPINGSOk() (*string, bool) {
	if o == nil || IsNil(o.USERFIELDMAPPINGS) {
		return nil, false
	}
	return o.USERFIELDMAPPINGS, true
}

// HasUSERFIELDMAPPINGS returns a boolean if a field has been set.
func (o *OktaConnectionAttributes) HasUSERFIELDMAPPINGS() bool {
	if o != nil && !IsNil(o.USERFIELDMAPPINGS) {
		return true
	}

	return false
}

// SetUSERFIELDMAPPINGS gets a reference to the given string and assigns it to the USERFIELDMAPPINGS field.
func (o *OktaConnectionAttributes) SetUSERFIELDMAPPINGS(v string) {
	o.USERFIELDMAPPINGS = &v
}

// GetAPPACCOUNTFIELDMAPPINGS returns the APPACCOUNTFIELDMAPPINGS field value if set, zero value otherwise.
func (o *OktaConnectionAttributes) GetAPPACCOUNTFIELDMAPPINGS() string {
	if o == nil || IsNil(o.APPACCOUNTFIELDMAPPINGS) {
		var ret string
		return ret
	}
	return *o.APPACCOUNTFIELDMAPPINGS
}

// GetAPPACCOUNTFIELDMAPPINGSOk returns a tuple with the APPACCOUNTFIELDMAPPINGS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnectionAttributes) GetAPPACCOUNTFIELDMAPPINGSOk() (*string, bool) {
	if o == nil || IsNil(o.APPACCOUNTFIELDMAPPINGS) {
		return nil, false
	}
	return o.APPACCOUNTFIELDMAPPINGS, true
}

// HasAPPACCOUNTFIELDMAPPINGS returns a boolean if a field has been set.
func (o *OktaConnectionAttributes) HasAPPACCOUNTFIELDMAPPINGS() bool {
	if o != nil && !IsNil(o.APPACCOUNTFIELDMAPPINGS) {
		return true
	}

	return false
}

// SetAPPACCOUNTFIELDMAPPINGS gets a reference to the given string and assigns it to the APPACCOUNTFIELDMAPPINGS field.
func (o *OktaConnectionAttributes) SetAPPACCOUNTFIELDMAPPINGS(v string) {
	o.APPACCOUNTFIELDMAPPINGS = &v
}

// GetMODIFYUSERDATAJSON returns the MODIFYUSERDATAJSON field value if set, zero value otherwise.
func (o *OktaConnectionAttributes) GetMODIFYUSERDATAJSON() string {
	if o == nil || IsNil(o.MODIFYUSERDATAJSON) {
		var ret string
		return ret
	}
	return *o.MODIFYUSERDATAJSON
}

// GetMODIFYUSERDATAJSONOk returns a tuple with the MODIFYUSERDATAJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnectionAttributes) GetMODIFYUSERDATAJSONOk() (*string, bool) {
	if o == nil || IsNil(o.MODIFYUSERDATAJSON) {
		return nil, false
	}
	return o.MODIFYUSERDATAJSON, true
}

// HasMODIFYUSERDATAJSON returns a boolean if a field has been set.
func (o *OktaConnectionAttributes) HasMODIFYUSERDATAJSON() bool {
	if o != nil && !IsNil(o.MODIFYUSERDATAJSON) {
		return true
	}

	return false
}

// SetMODIFYUSERDATAJSON gets a reference to the given string and assigns it to the MODIFYUSERDATAJSON field.
func (o *OktaConnectionAttributes) SetMODIFYUSERDATAJSON(v string) {
	o.MODIFYUSERDATAJSON = &v
}

// GetConnectionTimeoutConfig returns the ConnectionTimeoutConfig field value if set, zero value otherwise.
func (o *OktaConnectionAttributes) GetConnectionTimeoutConfig() ConnectionTimeoutConfig {
	if o == nil || IsNil(o.ConnectionTimeoutConfig) {
		var ret ConnectionTimeoutConfig
		return ret
	}
	return *o.ConnectionTimeoutConfig
}

// GetConnectionTimeoutConfigOk returns a tuple with the ConnectionTimeoutConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnectionAttributes) GetConnectionTimeoutConfigOk() (*ConnectionTimeoutConfig, bool) {
	if o == nil || IsNil(o.ConnectionTimeoutConfig) {
		return nil, false
	}
	return o.ConnectionTimeoutConfig, true
}

// HasConnectionTimeoutConfig returns a boolean if a field has been set.
func (o *OktaConnectionAttributes) HasConnectionTimeoutConfig() bool {
	if o != nil && !IsNil(o.ConnectionTimeoutConfig) {
		return true
	}

	return false
}

// SetConnectionTimeoutConfig gets a reference to the given ConnectionTimeoutConfig and assigns it to the ConnectionTimeoutConfig field.
func (o *OktaConnectionAttributes) SetConnectionTimeoutConfig(v ConnectionTimeoutConfig) {
	o.ConnectionTimeoutConfig = &v
}

// GetConnectionType returns the ConnectionType field value if set, zero value otherwise.
func (o *OktaConnectionAttributes) GetConnectionType() string {
	if o == nil || IsNil(o.ConnectionType) {
		var ret string
		return ret
	}
	return *o.ConnectionType
}

// GetConnectionTypeOk returns a tuple with the ConnectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnectionAttributes) GetConnectionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionType) {
		return nil, false
	}
	return o.ConnectionType, true
}

// HasConnectionType returns a boolean if a field has been set.
func (o *OktaConnectionAttributes) HasConnectionType() bool {
	if o != nil && !IsNil(o.ConnectionType) {
		return true
	}

	return false
}

// SetConnectionType gets a reference to the given string and assigns it to the ConnectionType field.
func (o *OktaConnectionAttributes) SetConnectionType(v string) {
	o.ConnectionType = &v
}

// GetIsTimeoutConfigValidated returns the IsTimeoutConfigValidated field value if set, zero value otherwise.
func (o *OktaConnectionAttributes) GetIsTimeoutConfigValidated() bool {
	if o == nil || IsNil(o.IsTimeoutConfigValidated) {
		var ret bool
		return ret
	}
	return *o.IsTimeoutConfigValidated
}

// GetIsTimeoutConfigValidatedOk returns a tuple with the IsTimeoutConfigValidated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnectionAttributes) GetIsTimeoutConfigValidatedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsTimeoutConfigValidated) {
		return nil, false
	}
	return o.IsTimeoutConfigValidated, true
}

// HasIsTimeoutConfigValidated returns a boolean if a field has been set.
func (o *OktaConnectionAttributes) HasIsTimeoutConfigValidated() bool {
	if o != nil && !IsNil(o.IsTimeoutConfigValidated) {
		return true
	}

	return false
}

// SetIsTimeoutConfigValidated gets a reference to the given bool and assigns it to the IsTimeoutConfigValidated field.
func (o *OktaConnectionAttributes) SetIsTimeoutConfigValidated(v bool) {
	o.IsTimeoutConfigValidated = &v
}

// GetACTIVATE_ENDPOINT returns the ACTIVATE_ENDPOINT field value if set, zero value otherwise.
func (o *OktaConnectionAttributes) GetACTIVATE_ENDPOINT() string {
	if o == nil || IsNil(o.ACTIVATE_ENDPOINT) {
		var ret string
		return ret
	}
	return *o.ACTIVATE_ENDPOINT
}

// GetACTIVATE_ENDPOINTOk returns a tuple with the ACTIVATE_ENDPOINT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnectionAttributes) GetACTIVATE_ENDPOINTOk() (*string, bool) {
	if o == nil || IsNil(o.ACTIVATE_ENDPOINT) {
		return nil, false
	}
	return o.ACTIVATE_ENDPOINT, true
}

// HasACTIVATE_ENDPOINT returns a boolean if a field has been set.
func (o *OktaConnectionAttributes) HasACTIVATE_ENDPOINT() bool {
	if o != nil && !IsNil(o.ACTIVATE_ENDPOINT) {
		return true
	}

	return false
}

// SetACTIVATE_ENDPOINT gets a reference to the given string and assigns it to the ACTIVATE_ENDPOINT field.
func (o *OktaConnectionAttributes) SetACTIVATE_ENDPOINT(v string) {
	o.ACTIVATE_ENDPOINT = &v
}

// GetENTITLEMENTTYPESMAPPINGS returns the ENTITLEMENTTYPESMAPPINGS field value if set, zero value otherwise.
func (o *OktaConnectionAttributes) GetENTITLEMENTTYPESMAPPINGS() string {
	if o == nil || IsNil(o.ENTITLEMENTTYPESMAPPINGS) {
		var ret string
		return ret
	}
	return *o.ENTITLEMENTTYPESMAPPINGS
}

// GetENTITLEMENTTYPESMAPPINGSOk returns a tuple with the ENTITLEMENTTYPESMAPPINGS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnectionAttributes) GetENTITLEMENTTYPESMAPPINGSOk() (*string, bool) {
	if o == nil || IsNil(o.ENTITLEMENTTYPESMAPPINGS) {
		return nil, false
	}
	return o.ENTITLEMENTTYPESMAPPINGS, true
}

// HasENTITLEMENTTYPESMAPPINGS returns a boolean if a field has been set.
func (o *OktaConnectionAttributes) HasENTITLEMENTTYPESMAPPINGS() bool {
	if o != nil && !IsNil(o.ENTITLEMENTTYPESMAPPINGS) {
		return true
	}

	return false
}

// SetENTITLEMENTTYPESMAPPINGS gets a reference to the given string and assigns it to the ENTITLEMENTTYPESMAPPINGS field.
func (o *OktaConnectionAttributes) SetENTITLEMENTTYPESMAPPINGS(v string) {
	o.ENTITLEMENTTYPESMAPPINGS = &v
}

// GetOKTA_APPLICATION_SECURITYSYSTEM returns the OKTA_APPLICATION_SECURITYSYSTEM field value if set, zero value otherwise.
func (o *OktaConnectionAttributes) GetOKTA_APPLICATION_SECURITYSYSTEM() string {
	if o == nil || IsNil(o.OKTA_APPLICATION_SECURITYSYSTEM) {
		var ret string
		return ret
	}
	return *o.OKTA_APPLICATION_SECURITYSYSTEM
}

// GetOKTA_APPLICATION_SECURITYSYSTEMOk returns a tuple with the OKTA_APPLICATION_SECURITYSYSTEM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnectionAttributes) GetOKTA_APPLICATION_SECURITYSYSTEMOk() (*string, bool) {
	if o == nil || IsNil(o.OKTA_APPLICATION_SECURITYSYSTEM) {
		return nil, false
	}
	return o.OKTA_APPLICATION_SECURITYSYSTEM, true
}

// HasOKTA_APPLICATION_SECURITYSYSTEM returns a boolean if a field has been set.
func (o *OktaConnectionAttributes) HasOKTA_APPLICATION_SECURITYSYSTEM() bool {
	if o != nil && !IsNil(o.OKTA_APPLICATION_SECURITYSYSTEM) {
		return true
	}

	return false
}

// SetOKTA_APPLICATION_SECURITYSYSTEM gets a reference to the given string and assigns it to the OKTA_APPLICATION_SECURITYSYSTEM field.
func (o *OktaConnectionAttributes) SetOKTA_APPLICATION_SECURITYSYSTEM(v string) {
	o.OKTA_APPLICATION_SECURITYSYSTEM = &v
}

// GetPAM_CONFIG returns the PAM_CONFIG field value if set, zero value otherwise.
func (o *OktaConnectionAttributes) GetPAM_CONFIG() string {
	if o == nil || IsNil(o.PAM_CONFIG) {
		var ret string
		return ret
	}
	return *o.PAM_CONFIG
}

// GetPAM_CONFIGOk returns a tuple with the PAM_CONFIG field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnectionAttributes) GetPAM_CONFIGOk() (*string, bool) {
	if o == nil || IsNil(o.PAM_CONFIG) {
		return nil, false
	}
	return o.PAM_CONFIG, true
}

// HasPAM_CONFIG returns a boolean if a field has been set.
func (o *OktaConnectionAttributes) HasPAM_CONFIG() bool {
	if o != nil && !IsNil(o.PAM_CONFIG) {
		return true
	}

	return false
}

// SetPAM_CONFIG gets a reference to the given string and assigns it to the PAM_CONFIG field.
func (o *OktaConnectionAttributes) SetPAM_CONFIG(v string) {
	o.PAM_CONFIG = &v
}

// GetConfigJSON returns the ConfigJSON field value if set, zero value otherwise.
func (o *OktaConnectionAttributes) GetConfigJSON() string {
	if o == nil || IsNil(o.ConfigJSON) {
		var ret string
		return ret
	}
	return *o.ConfigJSON
}

// GetConfigJSONOk returns a tuple with the ConfigJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnectionAttributes) GetConfigJSONOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigJSON) {
		return nil, false
	}
	return o.ConfigJSON, true
}

// HasConfigJSON returns a boolean if a field has been set.
func (o *OktaConnectionAttributes) HasConfigJSON() bool {
	if o != nil && !IsNil(o.ConfigJSON) {
		return true
	}

	return false
}

// SetConfigJSON gets a reference to the given string and assigns it to the ConfigJSON field.
func (o *OktaConnectionAttributes) SetConfigJSON(v string) {
	o.ConfigJSON = &v
}

// GetSTATUS_THRESHOLD_CONFIG returns the STATUS_THRESHOLD_CONFIG field value if set, zero value otherwise.
func (o *OktaConnectionAttributes) GetSTATUS_THRESHOLD_CONFIG() string {
	if o == nil || IsNil(o.STATUS_THRESHOLD_CONFIG) {
		var ret string
		return ret
	}
	return *o.STATUS_THRESHOLD_CONFIG
}

// GetSTATUS_THRESHOLD_CONFIGOk returns a tuple with the STATUS_THRESHOLD_CONFIG field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnectionAttributes) GetSTATUS_THRESHOLD_CONFIGOk() (*string, bool) {
	if o == nil || IsNil(o.STATUS_THRESHOLD_CONFIG) {
		return nil, false
	}
	return o.STATUS_THRESHOLD_CONFIG, true
}

// HasSTATUS_THRESHOLD_CONFIG returns a boolean if a field has been set.
func (o *OktaConnectionAttributes) HasSTATUS_THRESHOLD_CONFIG() bool {
	if o != nil && !IsNil(o.STATUS_THRESHOLD_CONFIG) {
		return true
	}

	return false
}

// SetSTATUS_THRESHOLD_CONFIG gets a reference to the given string and assigns it to the STATUS_THRESHOLD_CONFIG field.
func (o *OktaConnectionAttributes) SetSTATUS_THRESHOLD_CONFIG(v string) {
	o.STATUS_THRESHOLD_CONFIG = &v
}

func (o OktaConnectionAttributes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OktaConnectionAttributes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IMPORTURL) {
		toSerialize["IMPORTURL"] = o.IMPORTURL
	}
	if !IsNil(o.AUTHTOKEN) {
		toSerialize["AUTHTOKEN"] = o.AUTHTOKEN
	}
	if !IsNil(o.IsTimeoutSupported) {
		toSerialize["isTimeoutSupported"] = o.IsTimeoutSupported
	}
	if !IsNil(o.OKTA_GROUPS_FILTER) {
		toSerialize["OKTA_GROUPS_FILTER"] = o.OKTA_GROUPS_FILTER
	}
	if !IsNil(o.ACCOUNTFIELDMAPPINGS) {
		toSerialize["ACCOUNTFIELDMAPPINGS"] = o.ACCOUNTFIELDMAPPINGS
	}
	if !IsNil(o.IMPORT_INACTIVE_APPS) {
		toSerialize["IMPORT_INACTIVE_APPS"] = o.IMPORT_INACTIVE_APPS
	}
	if !IsNil(o.AUDIT_FILTER) {
		toSerialize["AUDIT_FILTER"] = o.AUDIT_FILTER
	}
	if !IsNil(o.USERFIELDMAPPINGS) {
		toSerialize["USERFIELDMAPPINGS"] = o.USERFIELDMAPPINGS
	}
	if !IsNil(o.APPACCOUNTFIELDMAPPINGS) {
		toSerialize["APPACCOUNTFIELDMAPPINGS"] = o.APPACCOUNTFIELDMAPPINGS
	}
	if !IsNil(o.MODIFYUSERDATAJSON) {
		toSerialize["MODIFYUSERDATAJSON"] = o.MODIFYUSERDATAJSON
	}
	if !IsNil(o.ConnectionTimeoutConfig) {
		toSerialize["connectionTimeoutConfig"] = o.ConnectionTimeoutConfig
	}
	if !IsNil(o.ConnectionType) {
		toSerialize["connectionType"] = o.ConnectionType
	}
	if !IsNil(o.IsTimeoutConfigValidated) {
		toSerialize["isTimeoutConfigValidated"] = o.IsTimeoutConfigValidated
	}
	if !IsNil(o.ACTIVATE_ENDPOINT) {
		toSerialize["ACTIVATE_ENDPOINT"] = o.ACTIVATE_ENDPOINT
	}
	if !IsNil(o.ENTITLEMENTTYPESMAPPINGS) {
		toSerialize["ENTITLEMENTTYPESMAPPINGS"] = o.ENTITLEMENTTYPESMAPPINGS
	}
	if !IsNil(o.OKTA_APPLICATION_SECURITYSYSTEM) {
		toSerialize["OKTA_APPLICATION_SECURITYSYSTEM"] = o.OKTA_APPLICATION_SECURITYSYSTEM
	}
	if !IsNil(o.PAM_CONFIG) {
		toSerialize["PAM_CONFIG"] = o.PAM_CONFIG
	}
	if !IsNil(o.ConfigJSON) {
		toSerialize["ConfigJSON"] = o.ConfigJSON
	}
	if !IsNil(o.STATUS_THRESHOLD_CONFIG) {
		toSerialize["STATUS_THRESHOLD_CONFIG"] = o.STATUS_THRESHOLD_CONFIG
	}
	return toSerialize, nil
}

type NullableOktaConnectionAttributes struct {
	value *OktaConnectionAttributes
	isSet bool
}

func (v NullableOktaConnectionAttributes) Get() *OktaConnectionAttributes {
	return v.value
}

func (v *NullableOktaConnectionAttributes) Set(val *OktaConnectionAttributes) {
	v.value = val
	v.isSet = true
}

func (v NullableOktaConnectionAttributes) IsSet() bool {
	return v.isSet
}

func (v *NullableOktaConnectionAttributes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOktaConnectionAttributes(val *OktaConnectionAttributes) *NullableOktaConnectionAttributes {
	return &NullableOktaConnectionAttributes{value: val, isSet: true}
}

func (v NullableOktaConnectionAttributes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOktaConnectionAttributes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


