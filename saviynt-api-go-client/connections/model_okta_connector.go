/*
Connection Management API

Use this API to create a connection in Saviynt Identity Cloud.  The Authorization header must have \"Bearer {token}\".  **Mandatory Parameters:** - **connectionname**: Specify the name to identify the connection. - **connectiontype**: Specify a connection type. For example, if your target application is Active Directory, specify the connection type as \"AD\".  **Optional Parameters:** - **description**: Provide a description for the connection. - **defaultsavroles**: Specify the SAV role(s) required for managing this connection along with its associated security systems, endpoints, accounts, and entitlements. - **emailTemplate**: Specify the email template applicable for notifications. - **sslCertificate**: Specify the SSL certificate(s) to secure the connection between EIC and the target application. - **vaultConfiguration**: Specify the path of the vault to obtain secret data (suffix the connector name to make it unique). - **saveinvault**: Set to true to save the encrypted attribute in the configured vault.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package connections

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OktaConnector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OktaConnector{}

// OktaConnector struct for OktaConnector
type OktaConnector struct {
	BaseConnector
	// 
	IMPORTURL string `json:"IMPORTURL"`
	// 
	AUTHTOKEN string `json:"AUTHTOKEN"`
	// 
	ACCOUNTFIELDMAPPINGS *string `json:"ACCOUNTFIELDMAPPINGS,omitempty"`
	// 
	USERFIELDMAPPINGS *string `json:"USERFIELDMAPPINGS,omitempty"`
	// 
	ENTITLEMENTTYPESMAPPINGS *string `json:"ENTITLEMENTTYPESMAPPINGS,omitempty"`
	// 
	IMPORT_INACTIVE_APPS *string `json:"IMPORT_INACTIVE_APPS,omitempty"`
	// 
	OKTA_APPLICATION_SECURITYSYSTEM string `json:"OKTA_APPLICATION_SECURITYSYSTEM"`
	// 
	OKTA_GROUPS_FILTER *string `json:"OKTA_GROUPS_FILTER,omitempty"`
	// 
	APPACCOUNTFIELDMAPPINGS *string `json:"APPACCOUNTFIELDMAPPINGS,omitempty"`
	// 
	STATUS_THRESHOLD_CONFIG *string `json:"STATUS_THRESHOLD_CONFIG,omitempty"`
	// 
	AUDIT_FILTER *string `json:"AUDIT_FILTER,omitempty"`
	// 
	MODIFYUSERDATAJSON *string `json:"MODIFYUSERDATAJSON,omitempty"`
	// 
	ACTIVATE_ENDPOINT *string `json:"ACTIVATE_ENDPOINT,omitempty"`
	// 
	ConfigJSON *string `json:"ConfigJSON,omitempty"`
	// 
	PAM_CONFIG *string `json:"PAM_CONFIG,omitempty"`
}

type _OktaConnector OktaConnector

// NewOktaConnector instantiates a new OktaConnector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOktaConnector(iMPORTURL string, aUTHTOKEN string, oKTAAPPLICATIONSECURITYSYSTEM string, connectionName string, connectiontype string) *OktaConnector {
	this := OktaConnector{}
	this.ConnectionName = connectionName
	this.Connectiontype = connectiontype
	this.IMPORTURL = iMPORTURL
	this.AUTHTOKEN = aUTHTOKEN
	this.OKTA_APPLICATION_SECURITYSYSTEM = oKTAAPPLICATIONSECURITYSYSTEM
	return &this
}

// NewOktaConnectorWithDefaults instantiates a new OktaConnector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOktaConnectorWithDefaults() *OktaConnector {
	this := OktaConnector{}
	return &this
}

// GetIMPORTURL returns the IMPORTURL field value
func (o *OktaConnector) GetIMPORTURL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IMPORTURL
}

// GetIMPORTURLOk returns a tuple with the IMPORTURL field value
// and a boolean to check if the value has been set.
func (o *OktaConnector) GetIMPORTURLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IMPORTURL, true
}

// SetIMPORTURL sets field value
func (o *OktaConnector) SetIMPORTURL(v string) {
	o.IMPORTURL = v
}

// GetAUTHTOKEN returns the AUTHTOKEN field value
func (o *OktaConnector) GetAUTHTOKEN() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AUTHTOKEN
}

// GetAUTHTOKENOk returns a tuple with the AUTHTOKEN field value
// and a boolean to check if the value has been set.
func (o *OktaConnector) GetAUTHTOKENOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AUTHTOKEN, true
}

// SetAUTHTOKEN sets field value
func (o *OktaConnector) SetAUTHTOKEN(v string) {
	o.AUTHTOKEN = v
}

// GetACCOUNTFIELDMAPPINGS returns the ACCOUNTFIELDMAPPINGS field value if set, zero value otherwise.
func (o *OktaConnector) GetACCOUNTFIELDMAPPINGS() string {
	if o == nil || IsNil(o.ACCOUNTFIELDMAPPINGS) {
		var ret string
		return ret
	}
	return *o.ACCOUNTFIELDMAPPINGS
}

// GetACCOUNTFIELDMAPPINGSOk returns a tuple with the ACCOUNTFIELDMAPPINGS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnector) GetACCOUNTFIELDMAPPINGSOk() (*string, bool) {
	if o == nil || IsNil(o.ACCOUNTFIELDMAPPINGS) {
		return nil, false
	}
	return o.ACCOUNTFIELDMAPPINGS, true
}

// HasACCOUNTFIELDMAPPINGS returns a boolean if a field has been set.
func (o *OktaConnector) HasACCOUNTFIELDMAPPINGS() bool {
	if o != nil && !IsNil(o.ACCOUNTFIELDMAPPINGS) {
		return true
	}

	return false
}

// SetACCOUNTFIELDMAPPINGS gets a reference to the given string and assigns it to the ACCOUNTFIELDMAPPINGS field.
func (o *OktaConnector) SetACCOUNTFIELDMAPPINGS(v string) {
	o.ACCOUNTFIELDMAPPINGS = &v
}

// GetUSERFIELDMAPPINGS returns the USERFIELDMAPPINGS field value if set, zero value otherwise.
func (o *OktaConnector) GetUSERFIELDMAPPINGS() string {
	if o == nil || IsNil(o.USERFIELDMAPPINGS) {
		var ret string
		return ret
	}
	return *o.USERFIELDMAPPINGS
}

// GetUSERFIELDMAPPINGSOk returns a tuple with the USERFIELDMAPPINGS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnector) GetUSERFIELDMAPPINGSOk() (*string, bool) {
	if o == nil || IsNil(o.USERFIELDMAPPINGS) {
		return nil, false
	}
	return o.USERFIELDMAPPINGS, true
}

// HasUSERFIELDMAPPINGS returns a boolean if a field has been set.
func (o *OktaConnector) HasUSERFIELDMAPPINGS() bool {
	if o != nil && !IsNil(o.USERFIELDMAPPINGS) {
		return true
	}

	return false
}

// SetUSERFIELDMAPPINGS gets a reference to the given string and assigns it to the USERFIELDMAPPINGS field.
func (o *OktaConnector) SetUSERFIELDMAPPINGS(v string) {
	o.USERFIELDMAPPINGS = &v
}

// GetENTITLEMENTTYPESMAPPINGS returns the ENTITLEMENTTYPESMAPPINGS field value if set, zero value otherwise.
func (o *OktaConnector) GetENTITLEMENTTYPESMAPPINGS() string {
	if o == nil || IsNil(o.ENTITLEMENTTYPESMAPPINGS) {
		var ret string
		return ret
	}
	return *o.ENTITLEMENTTYPESMAPPINGS
}

// GetENTITLEMENTTYPESMAPPINGSOk returns a tuple with the ENTITLEMENTTYPESMAPPINGS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnector) GetENTITLEMENTTYPESMAPPINGSOk() (*string, bool) {
	if o == nil || IsNil(o.ENTITLEMENTTYPESMAPPINGS) {
		return nil, false
	}
	return o.ENTITLEMENTTYPESMAPPINGS, true
}

// HasENTITLEMENTTYPESMAPPINGS returns a boolean if a field has been set.
func (o *OktaConnector) HasENTITLEMENTTYPESMAPPINGS() bool {
	if o != nil && !IsNil(o.ENTITLEMENTTYPESMAPPINGS) {
		return true
	}

	return false
}

// SetENTITLEMENTTYPESMAPPINGS gets a reference to the given string and assigns it to the ENTITLEMENTTYPESMAPPINGS field.
func (o *OktaConnector) SetENTITLEMENTTYPESMAPPINGS(v string) {
	o.ENTITLEMENTTYPESMAPPINGS = &v
}

// GetIMPORT_INACTIVE_APPS returns the IMPORT_INACTIVE_APPS field value if set, zero value otherwise.
func (o *OktaConnector) GetIMPORT_INACTIVE_APPS() string {
	if o == nil || IsNil(o.IMPORT_INACTIVE_APPS) {
		var ret string
		return ret
	}
	return *o.IMPORT_INACTIVE_APPS
}

// GetIMPORT_INACTIVE_APPSOk returns a tuple with the IMPORT_INACTIVE_APPS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnector) GetIMPORT_INACTIVE_APPSOk() (*string, bool) {
	if o == nil || IsNil(o.IMPORT_INACTIVE_APPS) {
		return nil, false
	}
	return o.IMPORT_INACTIVE_APPS, true
}

// HasIMPORT_INACTIVE_APPS returns a boolean if a field has been set.
func (o *OktaConnector) HasIMPORT_INACTIVE_APPS() bool {
	if o != nil && !IsNil(o.IMPORT_INACTIVE_APPS) {
		return true
	}

	return false
}

// SetIMPORT_INACTIVE_APPS gets a reference to the given string and assigns it to the IMPORT_INACTIVE_APPS field.
func (o *OktaConnector) SetIMPORT_INACTIVE_APPS(v string) {
	o.IMPORT_INACTIVE_APPS = &v
}

// GetOKTA_APPLICATION_SECURITYSYSTEM returns the OKTA_APPLICATION_SECURITYSYSTEM field value
func (o *OktaConnector) GetOKTA_APPLICATION_SECURITYSYSTEM() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OKTA_APPLICATION_SECURITYSYSTEM
}

// GetOKTA_APPLICATION_SECURITYSYSTEMOk returns a tuple with the OKTA_APPLICATION_SECURITYSYSTEM field value
// and a boolean to check if the value has been set.
func (o *OktaConnector) GetOKTA_APPLICATION_SECURITYSYSTEMOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OKTA_APPLICATION_SECURITYSYSTEM, true
}

// SetOKTA_APPLICATION_SECURITYSYSTEM sets field value
func (o *OktaConnector) SetOKTA_APPLICATION_SECURITYSYSTEM(v string) {
	o.OKTA_APPLICATION_SECURITYSYSTEM = v
}

// GetOKTA_GROUPS_FILTER returns the OKTA_GROUPS_FILTER field value if set, zero value otherwise.
func (o *OktaConnector) GetOKTA_GROUPS_FILTER() string {
	if o == nil || IsNil(o.OKTA_GROUPS_FILTER) {
		var ret string
		return ret
	}
	return *o.OKTA_GROUPS_FILTER
}

// GetOKTA_GROUPS_FILTEROk returns a tuple with the OKTA_GROUPS_FILTER field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnector) GetOKTA_GROUPS_FILTEROk() (*string, bool) {
	if o == nil || IsNil(o.OKTA_GROUPS_FILTER) {
		return nil, false
	}
	return o.OKTA_GROUPS_FILTER, true
}

// HasOKTA_GROUPS_FILTER returns a boolean if a field has been set.
func (o *OktaConnector) HasOKTA_GROUPS_FILTER() bool {
	if o != nil && !IsNil(o.OKTA_GROUPS_FILTER) {
		return true
	}

	return false
}

// SetOKTA_GROUPS_FILTER gets a reference to the given string and assigns it to the OKTA_GROUPS_FILTER field.
func (o *OktaConnector) SetOKTA_GROUPS_FILTER(v string) {
	o.OKTA_GROUPS_FILTER = &v
}

// GetAPPACCOUNTFIELDMAPPINGS returns the APPACCOUNTFIELDMAPPINGS field value if set, zero value otherwise.
func (o *OktaConnector) GetAPPACCOUNTFIELDMAPPINGS() string {
	if o == nil || IsNil(o.APPACCOUNTFIELDMAPPINGS) {
		var ret string
		return ret
	}
	return *o.APPACCOUNTFIELDMAPPINGS
}

// GetAPPACCOUNTFIELDMAPPINGSOk returns a tuple with the APPACCOUNTFIELDMAPPINGS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnector) GetAPPACCOUNTFIELDMAPPINGSOk() (*string, bool) {
	if o == nil || IsNil(o.APPACCOUNTFIELDMAPPINGS) {
		return nil, false
	}
	return o.APPACCOUNTFIELDMAPPINGS, true
}

// HasAPPACCOUNTFIELDMAPPINGS returns a boolean if a field has been set.
func (o *OktaConnector) HasAPPACCOUNTFIELDMAPPINGS() bool {
	if o != nil && !IsNil(o.APPACCOUNTFIELDMAPPINGS) {
		return true
	}

	return false
}

// SetAPPACCOUNTFIELDMAPPINGS gets a reference to the given string and assigns it to the APPACCOUNTFIELDMAPPINGS field.
func (o *OktaConnector) SetAPPACCOUNTFIELDMAPPINGS(v string) {
	o.APPACCOUNTFIELDMAPPINGS = &v
}

// GetSTATUS_THRESHOLD_CONFIG returns the STATUS_THRESHOLD_CONFIG field value if set, zero value otherwise.
func (o *OktaConnector) GetSTATUS_THRESHOLD_CONFIG() string {
	if o == nil || IsNil(o.STATUS_THRESHOLD_CONFIG) {
		var ret string
		return ret
	}
	return *o.STATUS_THRESHOLD_CONFIG
}

// GetSTATUS_THRESHOLD_CONFIGOk returns a tuple with the STATUS_THRESHOLD_CONFIG field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnector) GetSTATUS_THRESHOLD_CONFIGOk() (*string, bool) {
	if o == nil || IsNil(o.STATUS_THRESHOLD_CONFIG) {
		return nil, false
	}
	return o.STATUS_THRESHOLD_CONFIG, true
}

// HasSTATUS_THRESHOLD_CONFIG returns a boolean if a field has been set.
func (o *OktaConnector) HasSTATUS_THRESHOLD_CONFIG() bool {
	if o != nil && !IsNil(o.STATUS_THRESHOLD_CONFIG) {
		return true
	}

	return false
}

// SetSTATUS_THRESHOLD_CONFIG gets a reference to the given string and assigns it to the STATUS_THRESHOLD_CONFIG field.
func (o *OktaConnector) SetSTATUS_THRESHOLD_CONFIG(v string) {
	o.STATUS_THRESHOLD_CONFIG = &v
}

// GetAUDIT_FILTER returns the AUDIT_FILTER field value if set, zero value otherwise.
func (o *OktaConnector) GetAUDIT_FILTER() string {
	if o == nil || IsNil(o.AUDIT_FILTER) {
		var ret string
		return ret
	}
	return *o.AUDIT_FILTER
}

// GetAUDIT_FILTEROk returns a tuple with the AUDIT_FILTER field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnector) GetAUDIT_FILTEROk() (*string, bool) {
	if o == nil || IsNil(o.AUDIT_FILTER) {
		return nil, false
	}
	return o.AUDIT_FILTER, true
}

// HasAUDIT_FILTER returns a boolean if a field has been set.
func (o *OktaConnector) HasAUDIT_FILTER() bool {
	if o != nil && !IsNil(o.AUDIT_FILTER) {
		return true
	}

	return false
}

// SetAUDIT_FILTER gets a reference to the given string and assigns it to the AUDIT_FILTER field.
func (o *OktaConnector) SetAUDIT_FILTER(v string) {
	o.AUDIT_FILTER = &v
}

// GetMODIFYUSERDATAJSON returns the MODIFYUSERDATAJSON field value if set, zero value otherwise.
func (o *OktaConnector) GetMODIFYUSERDATAJSON() string {
	if o == nil || IsNil(o.MODIFYUSERDATAJSON) {
		var ret string
		return ret
	}
	return *o.MODIFYUSERDATAJSON
}

// GetMODIFYUSERDATAJSONOk returns a tuple with the MODIFYUSERDATAJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnector) GetMODIFYUSERDATAJSONOk() (*string, bool) {
	if o == nil || IsNil(o.MODIFYUSERDATAJSON) {
		return nil, false
	}
	return o.MODIFYUSERDATAJSON, true
}

// HasMODIFYUSERDATAJSON returns a boolean if a field has been set.
func (o *OktaConnector) HasMODIFYUSERDATAJSON() bool {
	if o != nil && !IsNil(o.MODIFYUSERDATAJSON) {
		return true
	}

	return false
}

// SetMODIFYUSERDATAJSON gets a reference to the given string and assigns it to the MODIFYUSERDATAJSON field.
func (o *OktaConnector) SetMODIFYUSERDATAJSON(v string) {
	o.MODIFYUSERDATAJSON = &v
}

// GetACTIVATE_ENDPOINT returns the ACTIVATE_ENDPOINT field value if set, zero value otherwise.
func (o *OktaConnector) GetACTIVATE_ENDPOINT() string {
	if o == nil || IsNil(o.ACTIVATE_ENDPOINT) {
		var ret string
		return ret
	}
	return *o.ACTIVATE_ENDPOINT
}

// GetACTIVATE_ENDPOINTOk returns a tuple with the ACTIVATE_ENDPOINT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnector) GetACTIVATE_ENDPOINTOk() (*string, bool) {
	if o == nil || IsNil(o.ACTIVATE_ENDPOINT) {
		return nil, false
	}
	return o.ACTIVATE_ENDPOINT, true
}

// HasACTIVATE_ENDPOINT returns a boolean if a field has been set.
func (o *OktaConnector) HasACTIVATE_ENDPOINT() bool {
	if o != nil && !IsNil(o.ACTIVATE_ENDPOINT) {
		return true
	}

	return false
}

// SetACTIVATE_ENDPOINT gets a reference to the given string and assigns it to the ACTIVATE_ENDPOINT field.
func (o *OktaConnector) SetACTIVATE_ENDPOINT(v string) {
	o.ACTIVATE_ENDPOINT = &v
}

// GetConfigJSON returns the ConfigJSON field value if set, zero value otherwise.
func (o *OktaConnector) GetConfigJSON() string {
	if o == nil || IsNil(o.ConfigJSON) {
		var ret string
		return ret
	}
	return *o.ConfigJSON
}

// GetConfigJSONOk returns a tuple with the ConfigJSON field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnector) GetConfigJSONOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigJSON) {
		return nil, false
	}
	return o.ConfigJSON, true
}

// HasConfigJSON returns a boolean if a field has been set.
func (o *OktaConnector) HasConfigJSON() bool {
	if o != nil && !IsNil(o.ConfigJSON) {
		return true
	}

	return false
}

// SetConfigJSON gets a reference to the given string and assigns it to the ConfigJSON field.
func (o *OktaConnector) SetConfigJSON(v string) {
	o.ConfigJSON = &v
}

// GetPAM_CONFIG returns the PAM_CONFIG field value if set, zero value otherwise.
func (o *OktaConnector) GetPAM_CONFIG() string {
	if o == nil || IsNil(o.PAM_CONFIG) {
		var ret string
		return ret
	}
	return *o.PAM_CONFIG
}

// GetPAM_CONFIGOk returns a tuple with the PAM_CONFIG field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OktaConnector) GetPAM_CONFIGOk() (*string, bool) {
	if o == nil || IsNil(o.PAM_CONFIG) {
		return nil, false
	}
	return o.PAM_CONFIG, true
}

// HasPAM_CONFIG returns a boolean if a field has been set.
func (o *OktaConnector) HasPAM_CONFIG() bool {
	if o != nil && !IsNil(o.PAM_CONFIG) {
		return true
	}

	return false
}

// SetPAM_CONFIG gets a reference to the given string and assigns it to the PAM_CONFIG field.
func (o *OktaConnector) SetPAM_CONFIG(v string) {
	o.PAM_CONFIG = &v
}

func (o OktaConnector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OktaConnector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedBaseConnector, errBaseConnector := json.Marshal(o.BaseConnector)
	if errBaseConnector != nil {
		return map[string]interface{}{}, errBaseConnector
	}
	errBaseConnector = json.Unmarshal([]byte(serializedBaseConnector), &toSerialize)
	if errBaseConnector != nil {
		return map[string]interface{}{}, errBaseConnector
	}
	toSerialize["IMPORTURL"] = o.IMPORTURL
	toSerialize["AUTHTOKEN"] = o.AUTHTOKEN
	if !IsNil(o.ACCOUNTFIELDMAPPINGS) {
		toSerialize["ACCOUNTFIELDMAPPINGS"] = o.ACCOUNTFIELDMAPPINGS
	}
	if !IsNil(o.USERFIELDMAPPINGS) {
		toSerialize["USERFIELDMAPPINGS"] = o.USERFIELDMAPPINGS
	}
	if !IsNil(o.ENTITLEMENTTYPESMAPPINGS) {
		toSerialize["ENTITLEMENTTYPESMAPPINGS"] = o.ENTITLEMENTTYPESMAPPINGS
	}
	if !IsNil(o.IMPORT_INACTIVE_APPS) {
		toSerialize["IMPORT_INACTIVE_APPS"] = o.IMPORT_INACTIVE_APPS
	}
	toSerialize["OKTA_APPLICATION_SECURITYSYSTEM"] = o.OKTA_APPLICATION_SECURITYSYSTEM
	if !IsNil(o.OKTA_GROUPS_FILTER) {
		toSerialize["OKTA_GROUPS_FILTER"] = o.OKTA_GROUPS_FILTER
	}
	if !IsNil(o.APPACCOUNTFIELDMAPPINGS) {
		toSerialize["APPACCOUNTFIELDMAPPINGS"] = o.APPACCOUNTFIELDMAPPINGS
	}
	if !IsNil(o.STATUS_THRESHOLD_CONFIG) {
		toSerialize["STATUS_THRESHOLD_CONFIG"] = o.STATUS_THRESHOLD_CONFIG
	}
	if !IsNil(o.AUDIT_FILTER) {
		toSerialize["AUDIT_FILTER"] = o.AUDIT_FILTER
	}
	if !IsNil(o.MODIFYUSERDATAJSON) {
		toSerialize["MODIFYUSERDATAJSON"] = o.MODIFYUSERDATAJSON
	}
	if !IsNil(o.ACTIVATE_ENDPOINT) {
		toSerialize["ACTIVATE_ENDPOINT"] = o.ACTIVATE_ENDPOINT
	}
	if !IsNil(o.ConfigJSON) {
		toSerialize["ConfigJSON"] = o.ConfigJSON
	}
	if !IsNil(o.PAM_CONFIG) {
		toSerialize["PAM_CONFIG"] = o.PAM_CONFIG
	}
	return toSerialize, nil
}

func (o *OktaConnector) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"IMPORTURL",
		"AUTHTOKEN",
		"OKTA_APPLICATION_SECURITYSYSTEM",
		"connectionName",
		"connectiontype",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOktaConnector := _OktaConnector{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOktaConnector)

	if err != nil {
		return err
	}

	*o = OktaConnector(varOktaConnector)

	return err
}

type NullableOktaConnector struct {
	value *OktaConnector
	isSet bool
}

func (v NullableOktaConnector) Get() *OktaConnector {
	return v.value
}

func (v *NullableOktaConnector) Set(val *OktaConnector) {
	v.value = val
	v.isSet = true
}

func (v NullableOktaConnector) IsSet() bool {
	return v.isSet
}

func (v *NullableOktaConnector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOktaConnector(val *OktaConnector) *NullableOktaConnector {
	return &NullableOktaConnector{value: val, isSet: true}
}

func (v NullableOktaConnector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOktaConnector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


