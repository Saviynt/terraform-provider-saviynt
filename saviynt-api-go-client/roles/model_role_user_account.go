/*
Saviynt API

API for managing roles in Saviynt.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package roles

import (
	"encoding/json"
)

// checks if the RoleUserAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoleUserAccount{}

// RoleUserAccount struct for RoleUserAccount
type RoleUserAccount struct {
	Id    *int32  `json:"id,omitempty"`
	Class *string `json:"class,omitempty"`
}

// NewRoleUserAccount instantiates a new RoleUserAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleUserAccount() *RoleUserAccount {
	this := RoleUserAccount{}
	return &this
}

// NewRoleUserAccountWithDefaults instantiates a new RoleUserAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleUserAccountWithDefaults() *RoleUserAccount {
	this := RoleUserAccount{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RoleUserAccount) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleUserAccount) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RoleUserAccount) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *RoleUserAccount) SetId(v int32) {
	o.Id = &v
}

// GetClass returns the Class field value if set, zero value otherwise.
func (o *RoleUserAccount) GetClass() string {
	if o == nil || IsNil(o.Class) {
		var ret string
		return ret
	}
	return *o.Class
}

// GetClassOk returns a tuple with the Class field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoleUserAccount) GetClassOk() (*string, bool) {
	if o == nil || IsNil(o.Class) {
		return nil, false
	}
	return o.Class, true
}

// HasClass returns a boolean if a field has been set.
func (o *RoleUserAccount) HasClass() bool {
	if o != nil && !IsNil(o.Class) {
		return true
	}

	return false
}

// SetClass gets a reference to the given string and assigns it to the Class field.
func (o *RoleUserAccount) SetClass(v string) {
	o.Class = &v
}

func (o RoleUserAccount) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoleUserAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Class) {
		toSerialize["class"] = o.Class
	}
	return toSerialize, nil
}

type NullableRoleUserAccount struct {
	value *RoleUserAccount
	isSet bool
}

func (v NullableRoleUserAccount) Get() *RoleUserAccount {
	return v.value
}

func (v *NullableRoleUserAccount) Set(val *RoleUserAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleUserAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleUserAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleUserAccount(val *RoleUserAccount) *NullableRoleUserAccount {
	return &NullableRoleUserAccount{value: val, isSet: true}
}

func (v NullableRoleUserAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleUserAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
