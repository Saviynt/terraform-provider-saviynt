/*
Saviynt API

API for managing roles in Saviynt.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package roles

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddOrRemoveRoleRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddOrRemoveRoleRequest{}

// AddOrRemoveRoleRequest struct for AddOrRemoveRoleRequest
type AddOrRemoveRoleRequest struct {
	Username string `json:"username"`
	Rolename string `json:"rolename"`
}

type _AddOrRemoveRoleRequest AddOrRemoveRoleRequest

// NewAddOrRemoveRoleRequest instantiates a new AddOrRemoveRoleRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddOrRemoveRoleRequest(username string, rolename string) *AddOrRemoveRoleRequest {
	this := AddOrRemoveRoleRequest{}
	this.Username = username
	this.Rolename = rolename
	return &this
}

// NewAddOrRemoveRoleRequestWithDefaults instantiates a new AddOrRemoveRoleRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddOrRemoveRoleRequestWithDefaults() *AddOrRemoveRoleRequest {
	this := AddOrRemoveRoleRequest{}
	return &this
}

// GetUsername returns the Username field value
func (o *AddOrRemoveRoleRequest) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *AddOrRemoveRoleRequest) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *AddOrRemoveRoleRequest) SetUsername(v string) {
	o.Username = v
}

// GetRolename returns the Rolename field value
func (o *AddOrRemoveRoleRequest) GetRolename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Rolename
}

// GetRolenameOk returns a tuple with the Rolename field value
// and a boolean to check if the value has been set.
func (o *AddOrRemoveRoleRequest) GetRolenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rolename, true
}

// SetRolename sets field value
func (o *AddOrRemoveRoleRequest) SetRolename(v string) {
	o.Rolename = v
}

func (o AddOrRemoveRoleRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddOrRemoveRoleRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["username"] = o.Username
	toSerialize["rolename"] = o.Rolename
	return toSerialize, nil
}

func (o *AddOrRemoveRoleRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"username",
		"rolename",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddOrRemoveRoleRequest := _AddOrRemoveRoleRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddOrRemoveRoleRequest)

	if err != nil {
		return err
	}

	*o = AddOrRemoveRoleRequest(varAddOrRemoveRoleRequest)

	return err
}

type NullableAddOrRemoveRoleRequest struct {
	value *AddOrRemoveRoleRequest
	isSet bool
}

func (v NullableAddOrRemoveRoleRequest) Get() *AddOrRemoveRoleRequest {
	return v.value
}

func (v *NullableAddOrRemoveRoleRequest) Set(val *AddOrRemoveRoleRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddOrRemoveRoleRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddOrRemoveRoleRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddOrRemoveRoleRequest(val *AddOrRemoveRoleRequest) *NullableAddOrRemoveRoleRequest {
	return &NullableAddOrRemoveRoleRequest{value: val, isSet: true}
}

func (v NullableAddOrRemoveRoleRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddOrRemoveRoleRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


