/*
Saviynt API

API for managing roles in Saviynt.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package roles

import (
	"encoding/json"
)

// checks if the UpdateChildRolePayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateChildRolePayload{}

// UpdateChildRolePayload struct for UpdateChildRolePayload
type UpdateChildRolePayload struct {
	Rolename   *string `json:"rolename,omitempty"`
	UpdateType *string `json:"updateType,omitempty"`
}

// NewUpdateChildRolePayload instantiates a new UpdateChildRolePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateChildRolePayload() *UpdateChildRolePayload {
	this := UpdateChildRolePayload{}
	return &this
}

// NewUpdateChildRolePayloadWithDefaults instantiates a new UpdateChildRolePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateChildRolePayloadWithDefaults() *UpdateChildRolePayload {
	this := UpdateChildRolePayload{}
	return &this
}

// GetRolename returns the Rolename field value if set, zero value otherwise.
func (o *UpdateChildRolePayload) GetRolename() string {
	if o == nil || IsNil(o.Rolename) {
		var ret string
		return ret
	}
	return *o.Rolename
}

// GetRolenameOk returns a tuple with the Rolename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateChildRolePayload) GetRolenameOk() (*string, bool) {
	if o == nil || IsNil(o.Rolename) {
		return nil, false
	}
	return o.Rolename, true
}

// HasRolename returns a boolean if a field has been set.
func (o *UpdateChildRolePayload) HasRolename() bool {
	if o != nil && !IsNil(o.Rolename) {
		return true
	}

	return false
}

// SetRolename gets a reference to the given string and assigns it to the Rolename field.
func (o *UpdateChildRolePayload) SetRolename(v string) {
	o.Rolename = &v
}

// GetUpdateType returns the UpdateType field value if set, zero value otherwise.
func (o *UpdateChildRolePayload) GetUpdateType() string {
	if o == nil || IsNil(o.UpdateType) {
		var ret string
		return ret
	}
	return *o.UpdateType
}

// GetUpdateTypeOk returns a tuple with the UpdateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateChildRolePayload) GetUpdateTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateType) {
		return nil, false
	}
	return o.UpdateType, true
}

// HasUpdateType returns a boolean if a field has been set.
func (o *UpdateChildRolePayload) HasUpdateType() bool {
	if o != nil && !IsNil(o.UpdateType) {
		return true
	}

	return false
}

// SetUpdateType gets a reference to the given string and assigns it to the UpdateType field.
func (o *UpdateChildRolePayload) SetUpdateType(v string) {
	o.UpdateType = &v
}

func (o UpdateChildRolePayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateChildRolePayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Rolename) {
		toSerialize["rolename"] = o.Rolename
	}
	if !IsNil(o.UpdateType) {
		toSerialize["updateType"] = o.UpdateType
	}
	return toSerialize, nil
}

type NullableUpdateChildRolePayload struct {
	value *UpdateChildRolePayload
	isSet bool
}

func (v NullableUpdateChildRolePayload) Get() *UpdateChildRolePayload {
	return v.value
}

func (v *NullableUpdateChildRolePayload) Set(val *UpdateChildRolePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateChildRolePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateChildRolePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateChildRolePayload(val *UpdateChildRolePayload) *NullableUpdateChildRolePayload {
	return &NullableUpdateChildRolePayload{value: val, isSet: true}
}

func (v NullableUpdateChildRolePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateChildRolePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
