/*
Saviynt API

API for managing roles in Saviynt.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package roles

import (
	"encoding/json"
)

// checks if the UpdateRoleOwnerPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateRoleOwnerPayload{}

// UpdateRoleOwnerPayload struct for UpdateRoleOwnerPayload
type UpdateRoleOwnerPayload struct {
	OwnerName *string `json:"ownerName,omitempty"`
	UpdateType *string `json:"updateType,omitempty"`
	Rank *string `json:"rank,omitempty"`
}

// NewUpdateRoleOwnerPayload instantiates a new UpdateRoleOwnerPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateRoleOwnerPayload() *UpdateRoleOwnerPayload {
	this := UpdateRoleOwnerPayload{}
	return &this
}

// NewUpdateRoleOwnerPayloadWithDefaults instantiates a new UpdateRoleOwnerPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateRoleOwnerPayloadWithDefaults() *UpdateRoleOwnerPayload {
	this := UpdateRoleOwnerPayload{}
	return &this
}

// GetOwnerName returns the OwnerName field value if set, zero value otherwise.
func (o *UpdateRoleOwnerPayload) GetOwnerName() string {
	if o == nil || IsNil(o.OwnerName) {
		var ret string
		return ret
	}
	return *o.OwnerName
}

// GetOwnerNameOk returns a tuple with the OwnerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRoleOwnerPayload) GetOwnerNameOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerName) {
		return nil, false
	}
	return o.OwnerName, true
}

// HasOwnerName returns a boolean if a field has been set.
func (o *UpdateRoleOwnerPayload) HasOwnerName() bool {
	if o != nil && !IsNil(o.OwnerName) {
		return true
	}

	return false
}

// SetOwnerName gets a reference to the given string and assigns it to the OwnerName field.
func (o *UpdateRoleOwnerPayload) SetOwnerName(v string) {
	o.OwnerName = &v
}

// GetUpdateType returns the UpdateType field value if set, zero value otherwise.
func (o *UpdateRoleOwnerPayload) GetUpdateType() string {
	if o == nil || IsNil(o.UpdateType) {
		var ret string
		return ret
	}
	return *o.UpdateType
}

// GetUpdateTypeOk returns a tuple with the UpdateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRoleOwnerPayload) GetUpdateTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateType) {
		return nil, false
	}
	return o.UpdateType, true
}

// HasUpdateType returns a boolean if a field has been set.
func (o *UpdateRoleOwnerPayload) HasUpdateType() bool {
	if o != nil && !IsNil(o.UpdateType) {
		return true
	}

	return false
}

// SetUpdateType gets a reference to the given string and assigns it to the UpdateType field.
func (o *UpdateRoleOwnerPayload) SetUpdateType(v string) {
	o.UpdateType = &v
}

// GetRank returns the Rank field value if set, zero value otherwise.
func (o *UpdateRoleOwnerPayload) GetRank() string {
	if o == nil || IsNil(o.Rank) {
		var ret string
		return ret
	}
	return *o.Rank
}

// GetRankOk returns a tuple with the Rank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRoleOwnerPayload) GetRankOk() (*string, bool) {
	if o == nil || IsNil(o.Rank) {
		return nil, false
	}
	return o.Rank, true
}

// HasRank returns a boolean if a field has been set.
func (o *UpdateRoleOwnerPayload) HasRank() bool {
	if o != nil && !IsNil(o.Rank) {
		return true
	}

	return false
}

// SetRank gets a reference to the given string and assigns it to the Rank field.
func (o *UpdateRoleOwnerPayload) SetRank(v string) {
	o.Rank = &v
}

func (o UpdateRoleOwnerPayload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateRoleOwnerPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OwnerName) {
		toSerialize["ownerName"] = o.OwnerName
	}
	if !IsNil(o.UpdateType) {
		toSerialize["updateType"] = o.UpdateType
	}
	if !IsNil(o.Rank) {
		toSerialize["rank"] = o.Rank
	}
	return toSerialize, nil
}

type NullableUpdateRoleOwnerPayload struct {
	value *UpdateRoleOwnerPayload
	isSet bool
}

func (v NullableUpdateRoleOwnerPayload) Get() *UpdateRoleOwnerPayload {
	return v.value
}

func (v *NullableUpdateRoleOwnerPayload) Set(val *UpdateRoleOwnerPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRoleOwnerPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRoleOwnerPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRoleOwnerPayload(val *UpdateRoleOwnerPayload) *NullableUpdateRoleOwnerPayload {
	return &NullableUpdateRoleOwnerPayload{value: val, isSet: true}
}

func (v NullableUpdateRoleOwnerPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRoleOwnerPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


