/*
Saviynt API

API for managing roles in Saviynt.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package roles

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// GetRoleDetailsResponseOwner - struct for GetRoleDetailsResponseOwner
type GetRoleDetailsResponseOwner struct {
	ArrayOfGetRoleOwnersResponse *[]GetRoleOwnersResponse
	String                       *string
}

// []GetRoleOwnersResponseAsGetRoleDetailsResponseOwner is a convenience function that returns []GetRoleOwnersResponse wrapped in GetRoleDetailsResponseOwner
func ArrayOfGetRoleOwnersResponseAsGetRoleDetailsResponseOwner(v *[]GetRoleOwnersResponse) GetRoleDetailsResponseOwner {
	return GetRoleDetailsResponseOwner{
		ArrayOfGetRoleOwnersResponse: v,
	}
}

// stringAsGetRoleDetailsResponseOwner is a convenience function that returns string wrapped in GetRoleDetailsResponseOwner
func StringAsGetRoleDetailsResponseOwner(v *string) GetRoleDetailsResponseOwner {
	return GetRoleDetailsResponseOwner{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetRoleDetailsResponseOwner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ArrayOfGetRoleOwnersResponse
	err = newStrictDecoder(data).Decode(&dst.ArrayOfGetRoleOwnersResponse)
	if err == nil {
		jsonArrayOfGetRoleOwnersResponse, _ := json.Marshal(dst.ArrayOfGetRoleOwnersResponse)
		if string(jsonArrayOfGetRoleOwnersResponse) == "{}" { // empty struct
			dst.ArrayOfGetRoleOwnersResponse = nil
		} else {
			if err = validator.Validate(dst.ArrayOfGetRoleOwnersResponse); err != nil {
				dst.ArrayOfGetRoleOwnersResponse = nil
			} else {
				match++
			}
		}
	} else {
		dst.ArrayOfGetRoleOwnersResponse = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ArrayOfGetRoleOwnersResponse = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetRoleDetailsResponseOwner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetRoleDetailsResponseOwner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetRoleDetailsResponseOwner) MarshalJSON() ([]byte, error) {
	if src.ArrayOfGetRoleOwnersResponse != nil {
		return json.Marshal(&src.ArrayOfGetRoleOwnersResponse)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetRoleDetailsResponseOwner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ArrayOfGetRoleOwnersResponse != nil {
		return obj.ArrayOfGetRoleOwnersResponse
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj GetRoleDetailsResponseOwner) GetActualInstanceValue() interface{} {
	if obj.ArrayOfGetRoleOwnersResponse != nil {
		return *obj.ArrayOfGetRoleOwnersResponse
	}

	if obj.String != nil {
		return *obj.String
	}

	// all schemas are nil
	return nil
}

type NullableGetRoleDetailsResponseOwner struct {
	value *GetRoleDetailsResponseOwner
	isSet bool
}

func (v NullableGetRoleDetailsResponseOwner) Get() *GetRoleDetailsResponseOwner {
	return v.value
}

func (v *NullableGetRoleDetailsResponseOwner) Set(val *GetRoleDetailsResponseOwner) {
	v.value = val
	v.isSet = true
}

func (v NullableGetRoleDetailsResponseOwner) IsSet() bool {
	return v.isSet
}

func (v *NullableGetRoleDetailsResponseOwner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetRoleDetailsResponseOwner(val *GetRoleDetailsResponseOwner) *NullableGetRoleDetailsResponseOwner {
	return &NullableGetRoleDetailsResponseOwner{value: val, isSet: true}
}

func (v NullableGetRoleDetailsResponseOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetRoleDetailsResponseOwner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
