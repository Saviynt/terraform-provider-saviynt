/*
Saviynt API

API for managing roles in Saviynt.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package roles

import (
	"encoding/json"
)

// checks if the GetUserDetailsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetUserDetailsResponse{}

// GetUserDetailsResponse struct for GetUserDetailsResponse
type GetUserDetailsResponse struct {
	Username             *string `json:"username,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _GetUserDetailsResponse GetUserDetailsResponse

// NewGetUserDetailsResponse instantiates a new GetUserDetailsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetUserDetailsResponse() *GetUserDetailsResponse {
	this := GetUserDetailsResponse{}
	return &this
}

// NewGetUserDetailsResponseWithDefaults instantiates a new GetUserDetailsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetUserDetailsResponseWithDefaults() *GetUserDetailsResponse {
	this := GetUserDetailsResponse{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *GetUserDetailsResponse) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetUserDetailsResponse) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *GetUserDetailsResponse) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *GetUserDetailsResponse) SetUsername(v string) {
	o.Username = &v
}

func (o GetUserDetailsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetUserDetailsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *GetUserDetailsResponse) UnmarshalJSON(data []byte) (err error) {
	varGetUserDetailsResponse := _GetUserDetailsResponse{}

	err = json.Unmarshal(data, &varGetUserDetailsResponse)

	if err != nil {
		return err
	}

	*o = GetUserDetailsResponse(varGetUserDetailsResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "username")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableGetUserDetailsResponse struct {
	value *GetUserDetailsResponse
	isSet bool
}

func (v NullableGetUserDetailsResponse) Get() *GetUserDetailsResponse {
	return v.value
}

func (v *NullableGetUserDetailsResponse) Set(val *GetUserDetailsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetUserDetailsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetUserDetailsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetUserDetailsResponse(val *GetUserDetailsResponse) *NullableGetUserDetailsResponse {
	return &NullableGetUserDetailsResponse{value: val, isSet: true}
}

func (v NullableGetUserDetailsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetUserDetailsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
