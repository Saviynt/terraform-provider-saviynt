/*
Saviynt API

API for managing roles in Saviynt.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package roles

import (
	"encoding/json"
)

// checks if the UpdateEntitlementPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateEntitlementPayload{}

// UpdateEntitlementPayload struct for UpdateEntitlementPayload
type UpdateEntitlementPayload struct {
	EntitlementValue *string `json:"entitlement_value,omitempty"`
	EntitlementType  *string `json:"entitlementType,omitempty"`
	Endpoint         *string `json:"endpoint,omitempty"`
	UpdateType       *string `json:"updateType,omitempty"`
}

// NewUpdateEntitlementPayload instantiates a new UpdateEntitlementPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateEntitlementPayload() *UpdateEntitlementPayload {
	this := UpdateEntitlementPayload{}
	return &this
}

// NewUpdateEntitlementPayloadWithDefaults instantiates a new UpdateEntitlementPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateEntitlementPayloadWithDefaults() *UpdateEntitlementPayload {
	this := UpdateEntitlementPayload{}
	return &this
}

// GetEntitlementValue returns the EntitlementValue field value if set, zero value otherwise.
func (o *UpdateEntitlementPayload) GetEntitlementValue() string {
	if o == nil || IsNil(o.EntitlementValue) {
		var ret string
		return ret
	}
	return *o.EntitlementValue
}

// GetEntitlementValueOk returns a tuple with the EntitlementValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEntitlementPayload) GetEntitlementValueOk() (*string, bool) {
	if o == nil || IsNil(o.EntitlementValue) {
		return nil, false
	}
	return o.EntitlementValue, true
}

// HasEntitlementValue returns a boolean if a field has been set.
func (o *UpdateEntitlementPayload) HasEntitlementValue() bool {
	if o != nil && !IsNil(o.EntitlementValue) {
		return true
	}

	return false
}

// SetEntitlementValue gets a reference to the given string and assigns it to the EntitlementValue field.
func (o *UpdateEntitlementPayload) SetEntitlementValue(v string) {
	o.EntitlementValue = &v
}

// GetEntitlementType returns the EntitlementType field value if set, zero value otherwise.
func (o *UpdateEntitlementPayload) GetEntitlementType() string {
	if o == nil || IsNil(o.EntitlementType) {
		var ret string
		return ret
	}
	return *o.EntitlementType
}

// GetEntitlementTypeOk returns a tuple with the EntitlementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEntitlementPayload) GetEntitlementTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EntitlementType) {
		return nil, false
	}
	return o.EntitlementType, true
}

// HasEntitlementType returns a boolean if a field has been set.
func (o *UpdateEntitlementPayload) HasEntitlementType() bool {
	if o != nil && !IsNil(o.EntitlementType) {
		return true
	}

	return false
}

// SetEntitlementType gets a reference to the given string and assigns it to the EntitlementType field.
func (o *UpdateEntitlementPayload) SetEntitlementType(v string) {
	o.EntitlementType = &v
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise.
func (o *UpdateEntitlementPayload) GetEndpoint() string {
	if o == nil || IsNil(o.Endpoint) {
		var ret string
		return ret
	}
	return *o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEntitlementPayload) GetEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.Endpoint) {
		return nil, false
	}
	return o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *UpdateEntitlementPayload) HasEndpoint() bool {
	if o != nil && !IsNil(o.Endpoint) {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given string and assigns it to the Endpoint field.
func (o *UpdateEntitlementPayload) SetEndpoint(v string) {
	o.Endpoint = &v
}

// GetUpdateType returns the UpdateType field value if set, zero value otherwise.
func (o *UpdateEntitlementPayload) GetUpdateType() string {
	if o == nil || IsNil(o.UpdateType) {
		var ret string
		return ret
	}
	return *o.UpdateType
}

// GetUpdateTypeOk returns a tuple with the UpdateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateEntitlementPayload) GetUpdateTypeOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateType) {
		return nil, false
	}
	return o.UpdateType, true
}

// HasUpdateType returns a boolean if a field has been set.
func (o *UpdateEntitlementPayload) HasUpdateType() bool {
	if o != nil && !IsNil(o.UpdateType) {
		return true
	}

	return false
}

// SetUpdateType gets a reference to the given string and assigns it to the UpdateType field.
func (o *UpdateEntitlementPayload) SetUpdateType(v string) {
	o.UpdateType = &v
}

func (o UpdateEntitlementPayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateEntitlementPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntitlementValue) {
		toSerialize["entitlement_value"] = o.EntitlementValue
	}
	if !IsNil(o.EntitlementType) {
		toSerialize["entitlementType"] = o.EntitlementType
	}
	if !IsNil(o.Endpoint) {
		toSerialize["endpoint"] = o.Endpoint
	}
	if !IsNil(o.UpdateType) {
		toSerialize["updateType"] = o.UpdateType
	}
	return toSerialize, nil
}

type NullableUpdateEntitlementPayload struct {
	value *UpdateEntitlementPayload
	isSet bool
}

func (v NullableUpdateEntitlementPayload) Get() *UpdateEntitlementPayload {
	return v.value
}

func (v *NullableUpdateEntitlementPayload) Set(val *UpdateEntitlementPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateEntitlementPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateEntitlementPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateEntitlementPayload(val *UpdateEntitlementPayload) *NullableUpdateEntitlementPayload {
	return &NullableUpdateEntitlementPayload{value: val, isSet: true}
}

func (v NullableUpdateEntitlementPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateEntitlementPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
