/*
Saviynt API

API for managing utility in Saviynt.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package utility

import (
	"encoding/json"
)

// checks if the GetEcmVersionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetEcmVersionResponse{}

// GetEcmVersionResponse struct for GetEcmVersionResponse
type GetEcmVersionResponse struct {
	Version interface{} `json:"version,omitempty"`
}

// NewGetEcmVersionResponse instantiates a new GetEcmVersionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetEcmVersionResponse() *GetEcmVersionResponse {
	this := GetEcmVersionResponse{}
	return &this
}

// NewGetEcmVersionResponseWithDefaults instantiates a new GetEcmVersionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetEcmVersionResponseWithDefaults() *GetEcmVersionResponse {
	this := GetEcmVersionResponse{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetEcmVersionResponse) GetVersion() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetEcmVersionResponse) GetVersionOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return &o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *GetEcmVersionResponse) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given interface{} and assigns it to the Version field.
func (o *GetEcmVersionResponse) SetVersion(v interface{}) {
	o.Version = v
}

func (o GetEcmVersionResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetEcmVersionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableGetEcmVersionResponse struct {
	value *GetEcmVersionResponse
	isSet bool
}

func (v NullableGetEcmVersionResponse) Get() *GetEcmVersionResponse {
	return v.value
}

func (v *NullableGetEcmVersionResponse) Set(val *GetEcmVersionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetEcmVersionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetEcmVersionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetEcmVersionResponse(val *GetEcmVersionResponse) *NullableGetEcmVersionResponse {
	return &NullableGetEcmVersionResponse{value: val, isSet: true}
}

func (v NullableGetEcmVersionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetEcmVersionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


