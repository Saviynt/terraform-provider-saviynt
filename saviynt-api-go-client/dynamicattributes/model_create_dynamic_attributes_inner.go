/*
Dynamic Attribute Management API

Use this API to manage dynamic attributes in Saviynt Identity Cloud.  The Authorization header must have \"Bearer {token}\".

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynamicattributes

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the CreateDynamicAttributesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateDynamicAttributesInner{}

// CreateDynamicAttributesInner struct for CreateDynamicAttributesInner
type CreateDynamicAttributesInner struct {
	// Specify the dynamic attribute name to be used for filtering out and calling the respective attribute to be displayed.
	Attributename string `json:"attributename"`
	// Type of request
	Requesttype string `json:"requesttype"`
	// Specify the attribute type based on which you want to filter and display the dynamic attributes.
	Attributetype *string `json:"attributetype,omitempty"`
	// Attribute Group provides you an option to group or categorize and display the dynamic attributes in the Access Requests request form.
	Attributegroup *string `json:"attributegroup,omitempty"`
	// Specify the sequence where you want to display the dynamic attributes
	Orderindex *string `json:"orderindex,omitempty"`
	// pecify the name of the attribute, which you want to display in the Access Requests request form.
	Attributelable                            *string `json:"attributelable,omitempty"`
	Accountscolumn                            *string `json:"accountscolumn,omitempty"`
	Hideoncreate                              *string `json:"hideoncreate,omitempty"`
	Actionstring                              *string `json:"actionstring,omitempty"`
	Editable                                  *string `json:"editable,omitempty"`
	Hideonupdate                              *string `json:"hideonupdate,omitempty"`
	Actiontoperformwhenparentattributechanges *string `json:"actiontoperformwhenparentattributechanges,omitempty"`
	Defaultvalue                              *string `json:"defaultvalue,omitempty"`
	Required                                  *string `json:"required,omitempty"`
	Regex                                     *string `json:"regex,omitempty"`
	Attributevalue                            *string `json:"attributevalue,omitempty"`
	Showonchild                               *string `json:"showonchild,omitempty"`
	Parentattribute                           *string `json:"parentattribute,omitempty"`
	Descriptionascsv                          *string `json:"descriptionascsv,omitempty"`
}

type _CreateDynamicAttributesInner CreateDynamicAttributesInner

// NewCreateDynamicAttributesInner instantiates a new CreateDynamicAttributesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateDynamicAttributesInner(attributename string, requesttype string) *CreateDynamicAttributesInner {
	this := CreateDynamicAttributesInner{}
	this.Attributename = attributename
	this.Requesttype = requesttype
	return &this
}

// NewCreateDynamicAttributesInnerWithDefaults instantiates a new CreateDynamicAttributesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateDynamicAttributesInnerWithDefaults() *CreateDynamicAttributesInner {
	this := CreateDynamicAttributesInner{}
	return &this
}

// GetAttributename returns the Attributename field value
func (o *CreateDynamicAttributesInner) GetAttributename() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Attributename
}

// GetAttributenameOk returns a tuple with the Attributename field value
// and a boolean to check if the value has been set.
func (o *CreateDynamicAttributesInner) GetAttributenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Attributename, true
}

// SetAttributename sets field value
func (o *CreateDynamicAttributesInner) SetAttributename(v string) {
	o.Attributename = v
}

// GetRequesttype returns the Requesttype field value
func (o *CreateDynamicAttributesInner) GetRequesttype() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Requesttype
}

// GetRequesttypeOk returns a tuple with the Requesttype field value
// and a boolean to check if the value has been set.
func (o *CreateDynamicAttributesInner) GetRequesttypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Requesttype, true
}

// SetRequesttype sets field value
func (o *CreateDynamicAttributesInner) SetRequesttype(v string) {
	o.Requesttype = v
}

// GetAttributetype returns the Attributetype field value if set, zero value otherwise.
func (o *CreateDynamicAttributesInner) GetAttributetype() string {
	if o == nil || IsNil(o.Attributetype) {
		var ret string
		return ret
	}
	return *o.Attributetype
}

// GetAttributetypeOk returns a tuple with the Attributetype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDynamicAttributesInner) GetAttributetypeOk() (*string, bool) {
	if o == nil || IsNil(o.Attributetype) {
		return nil, false
	}
	return o.Attributetype, true
}

// HasAttributetype returns a boolean if a field has been set.
func (o *CreateDynamicAttributesInner) HasAttributetype() bool {
	if o != nil && !IsNil(o.Attributetype) {
		return true
	}

	return false
}

// SetAttributetype gets a reference to the given string and assigns it to the Attributetype field.
func (o *CreateDynamicAttributesInner) SetAttributetype(v string) {
	o.Attributetype = &v
}

// GetAttributegroup returns the Attributegroup field value if set, zero value otherwise.
func (o *CreateDynamicAttributesInner) GetAttributegroup() string {
	if o == nil || IsNil(o.Attributegroup) {
		var ret string
		return ret
	}
	return *o.Attributegroup
}

// GetAttributegroupOk returns a tuple with the Attributegroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDynamicAttributesInner) GetAttributegroupOk() (*string, bool) {
	if o == nil || IsNil(o.Attributegroup) {
		return nil, false
	}
	return o.Attributegroup, true
}

// HasAttributegroup returns a boolean if a field has been set.
func (o *CreateDynamicAttributesInner) HasAttributegroup() bool {
	if o != nil && !IsNil(o.Attributegroup) {
		return true
	}

	return false
}

// SetAttributegroup gets a reference to the given string and assigns it to the Attributegroup field.
func (o *CreateDynamicAttributesInner) SetAttributegroup(v string) {
	o.Attributegroup = &v
}

// GetOrderindex returns the Orderindex field value if set, zero value otherwise.
func (o *CreateDynamicAttributesInner) GetOrderindex() string {
	if o == nil || IsNil(o.Orderindex) {
		var ret string
		return ret
	}
	return *o.Orderindex
}

// GetOrderindexOk returns a tuple with the Orderindex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDynamicAttributesInner) GetOrderindexOk() (*string, bool) {
	if o == nil || IsNil(o.Orderindex) {
		return nil, false
	}
	return o.Orderindex, true
}

// HasOrderindex returns a boolean if a field has been set.
func (o *CreateDynamicAttributesInner) HasOrderindex() bool {
	if o != nil && !IsNil(o.Orderindex) {
		return true
	}

	return false
}

// SetOrderindex gets a reference to the given string and assigns it to the Orderindex field.
func (o *CreateDynamicAttributesInner) SetOrderindex(v string) {
	o.Orderindex = &v
}

// GetAttributelable returns the Attributelable field value if set, zero value otherwise.
func (o *CreateDynamicAttributesInner) GetAttributelable() string {
	if o == nil || IsNil(o.Attributelable) {
		var ret string
		return ret
	}
	return *o.Attributelable
}

// GetAttributelableOk returns a tuple with the Attributelable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDynamicAttributesInner) GetAttributelableOk() (*string, bool) {
	if o == nil || IsNil(o.Attributelable) {
		return nil, false
	}
	return o.Attributelable, true
}

// HasAttributelable returns a boolean if a field has been set.
func (o *CreateDynamicAttributesInner) HasAttributelable() bool {
	if o != nil && !IsNil(o.Attributelable) {
		return true
	}

	return false
}

// SetAttributelable gets a reference to the given string and assigns it to the Attributelable field.
func (o *CreateDynamicAttributesInner) SetAttributelable(v string) {
	o.Attributelable = &v
}

// GetAccountscolumn returns the Accountscolumn field value if set, zero value otherwise.
func (o *CreateDynamicAttributesInner) GetAccountscolumn() string {
	if o == nil || IsNil(o.Accountscolumn) {
		var ret string
		return ret
	}
	return *o.Accountscolumn
}

// GetAccountscolumnOk returns a tuple with the Accountscolumn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDynamicAttributesInner) GetAccountscolumnOk() (*string, bool) {
	if o == nil || IsNil(o.Accountscolumn) {
		return nil, false
	}
	return o.Accountscolumn, true
}

// HasAccountscolumn returns a boolean if a field has been set.
func (o *CreateDynamicAttributesInner) HasAccountscolumn() bool {
	if o != nil && !IsNil(o.Accountscolumn) {
		return true
	}

	return false
}

// SetAccountscolumn gets a reference to the given string and assigns it to the Accountscolumn field.
func (o *CreateDynamicAttributesInner) SetAccountscolumn(v string) {
	o.Accountscolumn = &v
}

// GetHideoncreate returns the Hideoncreate field value if set, zero value otherwise.
func (o *CreateDynamicAttributesInner) GetHideoncreate() string {
	if o == nil || IsNil(o.Hideoncreate) {
		var ret string
		return ret
	}
	return *o.Hideoncreate
}

// GetHideoncreateOk returns a tuple with the Hideoncreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDynamicAttributesInner) GetHideoncreateOk() (*string, bool) {
	if o == nil || IsNil(o.Hideoncreate) {
		return nil, false
	}
	return o.Hideoncreate, true
}

// HasHideoncreate returns a boolean if a field has been set.
func (o *CreateDynamicAttributesInner) HasHideoncreate() bool {
	if o != nil && !IsNil(o.Hideoncreate) {
		return true
	}

	return false
}

// SetHideoncreate gets a reference to the given string and assigns it to the Hideoncreate field.
func (o *CreateDynamicAttributesInner) SetHideoncreate(v string) {
	o.Hideoncreate = &v
}

// GetActionstring returns the Actionstring field value if set, zero value otherwise.
func (o *CreateDynamicAttributesInner) GetActionstring() string {
	if o == nil || IsNil(o.Actionstring) {
		var ret string
		return ret
	}
	return *o.Actionstring
}

// GetActionstringOk returns a tuple with the Actionstring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDynamicAttributesInner) GetActionstringOk() (*string, bool) {
	if o == nil || IsNil(o.Actionstring) {
		return nil, false
	}
	return o.Actionstring, true
}

// HasActionstring returns a boolean if a field has been set.
func (o *CreateDynamicAttributesInner) HasActionstring() bool {
	if o != nil && !IsNil(o.Actionstring) {
		return true
	}

	return false
}

// SetActionstring gets a reference to the given string and assigns it to the Actionstring field.
func (o *CreateDynamicAttributesInner) SetActionstring(v string) {
	o.Actionstring = &v
}

// GetEditable returns the Editable field value if set, zero value otherwise.
func (o *CreateDynamicAttributesInner) GetEditable() string {
	if o == nil || IsNil(o.Editable) {
		var ret string
		return ret
	}
	return *o.Editable
}

// GetEditableOk returns a tuple with the Editable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDynamicAttributesInner) GetEditableOk() (*string, bool) {
	if o == nil || IsNil(o.Editable) {
		return nil, false
	}
	return o.Editable, true
}

// HasEditable returns a boolean if a field has been set.
func (o *CreateDynamicAttributesInner) HasEditable() bool {
	if o != nil && !IsNil(o.Editable) {
		return true
	}

	return false
}

// SetEditable gets a reference to the given string and assigns it to the Editable field.
func (o *CreateDynamicAttributesInner) SetEditable(v string) {
	o.Editable = &v
}

// GetHideonupdate returns the Hideonupdate field value if set, zero value otherwise.
func (o *CreateDynamicAttributesInner) GetHideonupdate() string {
	if o == nil || IsNil(o.Hideonupdate) {
		var ret string
		return ret
	}
	return *o.Hideonupdate
}

// GetHideonupdateOk returns a tuple with the Hideonupdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDynamicAttributesInner) GetHideonupdateOk() (*string, bool) {
	if o == nil || IsNil(o.Hideonupdate) {
		return nil, false
	}
	return o.Hideonupdate, true
}

// HasHideonupdate returns a boolean if a field has been set.
func (o *CreateDynamicAttributesInner) HasHideonupdate() bool {
	if o != nil && !IsNil(o.Hideonupdate) {
		return true
	}

	return false
}

// SetHideonupdate gets a reference to the given string and assigns it to the Hideonupdate field.
func (o *CreateDynamicAttributesInner) SetHideonupdate(v string) {
	o.Hideonupdate = &v
}

// GetActiontoperformwhenparentattributechanges returns the Actiontoperformwhenparentattributechanges field value if set, zero value otherwise.
func (o *CreateDynamicAttributesInner) GetActiontoperformwhenparentattributechanges() string {
	if o == nil || IsNil(o.Actiontoperformwhenparentattributechanges) {
		var ret string
		return ret
	}
	return *o.Actiontoperformwhenparentattributechanges
}

// GetActiontoperformwhenparentattributechangesOk returns a tuple with the Actiontoperformwhenparentattributechanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDynamicAttributesInner) GetActiontoperformwhenparentattributechangesOk() (*string, bool) {
	if o == nil || IsNil(o.Actiontoperformwhenparentattributechanges) {
		return nil, false
	}
	return o.Actiontoperformwhenparentattributechanges, true
}

// HasActiontoperformwhenparentattributechanges returns a boolean if a field has been set.
func (o *CreateDynamicAttributesInner) HasActiontoperformwhenparentattributechanges() bool {
	if o != nil && !IsNil(o.Actiontoperformwhenparentattributechanges) {
		return true
	}

	return false
}

// SetActiontoperformwhenparentattributechanges gets a reference to the given string and assigns it to the Actiontoperformwhenparentattributechanges field.
func (o *CreateDynamicAttributesInner) SetActiontoperformwhenparentattributechanges(v string) {
	o.Actiontoperformwhenparentattributechanges = &v
}

// GetDefaultvalue returns the Defaultvalue field value if set, zero value otherwise.
func (o *CreateDynamicAttributesInner) GetDefaultvalue() string {
	if o == nil || IsNil(o.Defaultvalue) {
		var ret string
		return ret
	}
	return *o.Defaultvalue
}

// GetDefaultvalueOk returns a tuple with the Defaultvalue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDynamicAttributesInner) GetDefaultvalueOk() (*string, bool) {
	if o == nil || IsNil(o.Defaultvalue) {
		return nil, false
	}
	return o.Defaultvalue, true
}

// HasDefaultvalue returns a boolean if a field has been set.
func (o *CreateDynamicAttributesInner) HasDefaultvalue() bool {
	if o != nil && !IsNil(o.Defaultvalue) {
		return true
	}

	return false
}

// SetDefaultvalue gets a reference to the given string and assigns it to the Defaultvalue field.
func (o *CreateDynamicAttributesInner) SetDefaultvalue(v string) {
	o.Defaultvalue = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *CreateDynamicAttributesInner) GetRequired() string {
	if o == nil || IsNil(o.Required) {
		var ret string
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDynamicAttributesInner) GetRequiredOk() (*string, bool) {
	if o == nil || IsNil(o.Required) {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *CreateDynamicAttributesInner) HasRequired() bool {
	if o != nil && !IsNil(o.Required) {
		return true
	}

	return false
}

// SetRequired gets a reference to the given string and assigns it to the Required field.
func (o *CreateDynamicAttributesInner) SetRequired(v string) {
	o.Required = &v
}

// GetRegex returns the Regex field value if set, zero value otherwise.
func (o *CreateDynamicAttributesInner) GetRegex() string {
	if o == nil || IsNil(o.Regex) {
		var ret string
		return ret
	}
	return *o.Regex
}

// GetRegexOk returns a tuple with the Regex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDynamicAttributesInner) GetRegexOk() (*string, bool) {
	if o == nil || IsNil(o.Regex) {
		return nil, false
	}
	return o.Regex, true
}

// HasRegex returns a boolean if a field has been set.
func (o *CreateDynamicAttributesInner) HasRegex() bool {
	if o != nil && !IsNil(o.Regex) {
		return true
	}

	return false
}

// SetRegex gets a reference to the given string and assigns it to the Regex field.
func (o *CreateDynamicAttributesInner) SetRegex(v string) {
	o.Regex = &v
}

// GetAttributevalue returns the Attributevalue field value if set, zero value otherwise.
func (o *CreateDynamicAttributesInner) GetAttributevalue() string {
	if o == nil || IsNil(o.Attributevalue) {
		var ret string
		return ret
	}
	return *o.Attributevalue
}

// GetAttributevalueOk returns a tuple with the Attributevalue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDynamicAttributesInner) GetAttributevalueOk() (*string, bool) {
	if o == nil || IsNil(o.Attributevalue) {
		return nil, false
	}
	return o.Attributevalue, true
}

// HasAttributevalue returns a boolean if a field has been set.
func (o *CreateDynamicAttributesInner) HasAttributevalue() bool {
	if o != nil && !IsNil(o.Attributevalue) {
		return true
	}

	return false
}

// SetAttributevalue gets a reference to the given string and assigns it to the Attributevalue field.
func (o *CreateDynamicAttributesInner) SetAttributevalue(v string) {
	o.Attributevalue = &v
}

// GetShowonchild returns the Showonchild field value if set, zero value otherwise.
func (o *CreateDynamicAttributesInner) GetShowonchild() string {
	if o == nil || IsNil(o.Showonchild) {
		var ret string
		return ret
	}
	return *o.Showonchild
}

// GetShowonchildOk returns a tuple with the Showonchild field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDynamicAttributesInner) GetShowonchildOk() (*string, bool) {
	if o == nil || IsNil(o.Showonchild) {
		return nil, false
	}
	return o.Showonchild, true
}

// HasShowonchild returns a boolean if a field has been set.
func (o *CreateDynamicAttributesInner) HasShowonchild() bool {
	if o != nil && !IsNil(o.Showonchild) {
		return true
	}

	return false
}

// SetShowonchild gets a reference to the given string and assigns it to the Showonchild field.
func (o *CreateDynamicAttributesInner) SetShowonchild(v string) {
	o.Showonchild = &v
}

// GetParentattribute returns the Parentattribute field value if set, zero value otherwise.
func (o *CreateDynamicAttributesInner) GetParentattribute() string {
	if o == nil || IsNil(o.Parentattribute) {
		var ret string
		return ret
	}
	return *o.Parentattribute
}

// GetParentattributeOk returns a tuple with the Parentattribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDynamicAttributesInner) GetParentattributeOk() (*string, bool) {
	if o == nil || IsNil(o.Parentattribute) {
		return nil, false
	}
	return o.Parentattribute, true
}

// HasParentattribute returns a boolean if a field has been set.
func (o *CreateDynamicAttributesInner) HasParentattribute() bool {
	if o != nil && !IsNil(o.Parentattribute) {
		return true
	}

	return false
}

// SetParentattribute gets a reference to the given string and assigns it to the Parentattribute field.
func (o *CreateDynamicAttributesInner) SetParentattribute(v string) {
	o.Parentattribute = &v
}

// GetDescriptionascsv returns the Descriptionascsv field value if set, zero value otherwise.
func (o *CreateDynamicAttributesInner) GetDescriptionascsv() string {
	if o == nil || IsNil(o.Descriptionascsv) {
		var ret string
		return ret
	}
	return *o.Descriptionascsv
}

// GetDescriptionascsvOk returns a tuple with the Descriptionascsv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDynamicAttributesInner) GetDescriptionascsvOk() (*string, bool) {
	if o == nil || IsNil(o.Descriptionascsv) {
		return nil, false
	}
	return o.Descriptionascsv, true
}

// HasDescriptionascsv returns a boolean if a field has been set.
func (o *CreateDynamicAttributesInner) HasDescriptionascsv() bool {
	if o != nil && !IsNil(o.Descriptionascsv) {
		return true
	}

	return false
}

// SetDescriptionascsv gets a reference to the given string and assigns it to the Descriptionascsv field.
func (o *CreateDynamicAttributesInner) SetDescriptionascsv(v string) {
	o.Descriptionascsv = &v
}

func (o CreateDynamicAttributesInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateDynamicAttributesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["attributename"] = o.Attributename
	toSerialize["requesttype"] = o.Requesttype
	if !IsNil(o.Attributetype) {
		toSerialize["attributetype"] = o.Attributetype
	}
	if !IsNil(o.Attributegroup) {
		toSerialize["attributegroup"] = o.Attributegroup
	}
	if !IsNil(o.Orderindex) {
		toSerialize["orderindex"] = o.Orderindex
	}
	if !IsNil(o.Attributelable) {
		toSerialize["attributelable"] = o.Attributelable
	}
	if !IsNil(o.Accountscolumn) {
		toSerialize["accountscolumn"] = o.Accountscolumn
	}
	if !IsNil(o.Hideoncreate) {
		toSerialize["hideoncreate"] = o.Hideoncreate
	}
	if !IsNil(o.Actionstring) {
		toSerialize["actionstring"] = o.Actionstring
	}
	if !IsNil(o.Editable) {
		toSerialize["editable"] = o.Editable
	}
	if !IsNil(o.Hideonupdate) {
		toSerialize["hideonupdate"] = o.Hideonupdate
	}
	if !IsNil(o.Actiontoperformwhenparentattributechanges) {
		toSerialize["actiontoperformwhenparentattributechanges"] = o.Actiontoperformwhenparentattributechanges
	}
	if !IsNil(o.Defaultvalue) {
		toSerialize["defaultvalue"] = o.Defaultvalue
	}
	if !IsNil(o.Required) {
		toSerialize["required"] = o.Required
	}
	if !IsNil(o.Regex) {
		toSerialize["regex"] = o.Regex
	}
	if !IsNil(o.Attributevalue) {
		toSerialize["attributevalue"] = o.Attributevalue
	}
	if !IsNil(o.Showonchild) {
		toSerialize["showonchild"] = o.Showonchild
	}
	if !IsNil(o.Parentattribute) {
		toSerialize["parentattribute"] = o.Parentattribute
	}
	if !IsNil(o.Descriptionascsv) {
		toSerialize["descriptionascsv"] = o.Descriptionascsv
	}
	return toSerialize, nil
}

func (o *CreateDynamicAttributesInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"attributename",
		"requesttype",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateDynamicAttributesInner := _CreateDynamicAttributesInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateDynamicAttributesInner)

	if err != nil {
		return err
	}

	*o = CreateDynamicAttributesInner(varCreateDynamicAttributesInner)

	return err
}

type NullableCreateDynamicAttributesInner struct {
	value *CreateDynamicAttributesInner
	isSet bool
}

func (v NullableCreateDynamicAttributesInner) Get() *CreateDynamicAttributesInner {
	return v.value
}

func (v *NullableCreateDynamicAttributesInner) Set(val *CreateDynamicAttributesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDynamicAttributesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDynamicAttributesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDynamicAttributesInner(val *CreateDynamicAttributesInner) *NullableCreateDynamicAttributesInner {
	return &NullableCreateDynamicAttributesInner{value: val, isSet: true}
}

func (v NullableCreateDynamicAttributesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDynamicAttributesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
