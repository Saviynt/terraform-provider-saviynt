/*
Dynamic Attribute Management API

Use this API to manage dynamic attributes in Saviynt Identity Cloud.  The Authorization header must have \"Bearer {token}\".

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package dynamicattributes

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// DynamicAttributesAPIService DynamicAttributesAPI service
type DynamicAttributesAPIService service

type ApiCreateDynamicAttributeRequest struct {
	ctx context.Context
	ApiService *DynamicAttributesAPIService
	createDynamicAttributeRequest *CreateDynamicAttributeRequest
}

// Request payload for creating a dynamic attribute.
func (r ApiCreateDynamicAttributeRequest) CreateDynamicAttributeRequest(createDynamicAttributeRequest CreateDynamicAttributeRequest) ApiCreateDynamicAttributeRequest {
	r.createDynamicAttributeRequest = &createDynamicAttributeRequest
	return r
}

func (r ApiCreateDynamicAttributeRequest) Execute() (*CreateOrUpdateOrDeleteDynamicAttributeResponse, *http.Response, error) {
	return r.ApiService.CreateDynamicAttributeExecute(r)
}

/*
CreateDynamicAttribute Create a dynamic attribute

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateDynamicAttributeRequest
*/
func (a *DynamicAttributesAPIService) CreateDynamicAttribute(ctx context.Context) ApiCreateDynamicAttributeRequest {
	return ApiCreateDynamicAttributeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateOrUpdateOrDeleteDynamicAttributeResponse
func (a *DynamicAttributesAPIService) CreateDynamicAttributeExecute(r ApiCreateDynamicAttributeRequest) (*CreateOrUpdateOrDeleteDynamicAttributeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateOrUpdateOrDeleteDynamicAttributeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicAttributesAPIService.CreateDynamicAttribute")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ECM/api/v5/createDynamicAttribute"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createDynamicAttributeRequest == nil {
		return localVarReturnValue, nil, reportError("createDynamicAttributeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createDynamicAttributeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteDynamicAttributeRequest struct {
	ctx context.Context
	ApiService *DynamicAttributesAPIService
	deleteDynamicAttributeRequest *DeleteDynamicAttributeRequest
}

// Request payload for deleting dynamic attributes.
func (r ApiDeleteDynamicAttributeRequest) DeleteDynamicAttributeRequest(deleteDynamicAttributeRequest DeleteDynamicAttributeRequest) ApiDeleteDynamicAttributeRequest {
	r.deleteDynamicAttributeRequest = &deleteDynamicAttributeRequest
	return r
}

func (r ApiDeleteDynamicAttributeRequest) Execute() (*CreateOrUpdateOrDeleteDynamicAttributeResponse, *http.Response, error) {
	return r.ApiService.DeleteDynamicAttributeExecute(r)
}

/*
DeleteDynamicAttribute Delete a dynamic attribute

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeleteDynamicAttributeRequest
*/
func (a *DynamicAttributesAPIService) DeleteDynamicAttribute(ctx context.Context) ApiDeleteDynamicAttributeRequest {
	return ApiDeleteDynamicAttributeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateOrUpdateOrDeleteDynamicAttributeResponse
func (a *DynamicAttributesAPIService) DeleteDynamicAttributeExecute(r ApiDeleteDynamicAttributeRequest) (*CreateOrUpdateOrDeleteDynamicAttributeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateOrUpdateOrDeleteDynamicAttributeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicAttributesAPIService.DeleteDynamicAttribute")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ECM/api/v5/deleteDynamicAttribute"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.deleteDynamicAttributeRequest == nil {
		return localVarReturnValue, nil, reportError("deleteDynamicAttributeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.deleteDynamicAttributeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFetchDynamicAttributeRequest struct {
	ctx context.Context
	ApiService *DynamicAttributesAPIService
	securitysystem *[]string
	endpoint *[]string
	dynamicattributes *[]string
	requesttype *[]string
	offset *string
	max *string
	loggedinuser *string
}

// List of security systems to filter
func (r ApiFetchDynamicAttributeRequest) Securitysystem(securitysystem []string) ApiFetchDynamicAttributeRequest {
	r.securitysystem = &securitysystem
	return r
}

// List of endpoints to filter
func (r ApiFetchDynamicAttributeRequest) Endpoint(endpoint []string) ApiFetchDynamicAttributeRequest {
	r.endpoint = &endpoint
	return r
}

// List of dynamic attribute names
func (r ApiFetchDynamicAttributeRequest) Dynamicattributes(dynamicattributes []string) ApiFetchDynamicAttributeRequest {
	r.dynamicattributes = &dynamicattributes
	return r
}

// Types of request (ACCOUNT, etc.)
func (r ApiFetchDynamicAttributeRequest) Requesttype(requesttype []string) ApiFetchDynamicAttributeRequest {
	r.requesttype = &requesttype
	return r
}

// Pagination offset
func (r ApiFetchDynamicAttributeRequest) Offset(offset string) ApiFetchDynamicAttributeRequest {
	r.offset = &offset
	return r
}

// Maximum number of results
func (r ApiFetchDynamicAttributeRequest) Max(max string) ApiFetchDynamicAttributeRequest {
	r.max = &max
	return r
}

// Username of the logged-in user
func (r ApiFetchDynamicAttributeRequest) Loggedinuser(loggedinuser string) ApiFetchDynamicAttributeRequest {
	r.loggedinuser = &loggedinuser
	return r
}

func (r ApiFetchDynamicAttributeRequest) Execute() (*FetchDynamicAttributesResponse, *http.Response, error) {
	return r.ApiService.FetchDynamicAttributeExecute(r)
}

/*
FetchDynamicAttribute Fetch the dynamic attributes based on a given filter value or all

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiFetchDynamicAttributeRequest
*/
func (a *DynamicAttributesAPIService) FetchDynamicAttribute(ctx context.Context) ApiFetchDynamicAttributeRequest {
	return ApiFetchDynamicAttributeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FetchDynamicAttributesResponse
func (a *DynamicAttributesAPIService) FetchDynamicAttributeExecute(r ApiFetchDynamicAttributeRequest) (*FetchDynamicAttributesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *FetchDynamicAttributesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicAttributesAPIService.FetchDynamicAttribute")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ECM/api/v5/fetchDynamicAttribute"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.securitysystem != nil {
		t := *r.securitysystem
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "securitysystem", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "securitysystem", t, "form", "multi")
		}
	}
	if r.endpoint != nil {
		t := *r.endpoint
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "endpoint", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "endpoint", t, "form", "multi")
		}
	}
	if r.dynamicattributes != nil {
		t := *r.dynamicattributes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "dynamicattributes", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "dynamicattributes", t, "form", "multi")
		}
	}
	if r.requesttype != nil {
		t := *r.requesttype
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "requesttype", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "requesttype", t, "form", "multi")
		}
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.max != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "max", r.max, "form", "")
	}
	if r.loggedinuser != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "loggedinuser", r.loggedinuser, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateDynamicAttributeRequest struct {
	ctx context.Context
	ApiService *DynamicAttributesAPIService
	updateDynamicAttributeRequest *UpdateDynamicAttributeRequest
}

// Request payload for updating a dynamic attribute.
func (r ApiUpdateDynamicAttributeRequest) UpdateDynamicAttributeRequest(updateDynamicAttributeRequest UpdateDynamicAttributeRequest) ApiUpdateDynamicAttributeRequest {
	r.updateDynamicAttributeRequest = &updateDynamicAttributeRequest
	return r
}

func (r ApiUpdateDynamicAttributeRequest) Execute() (*CreateOrUpdateOrDeleteDynamicAttributeResponse, *http.Response, error) {
	return r.ApiService.UpdateDynamicAttributeExecute(r)
}

/*
UpdateDynamicAttribute Update a dynamic attribute

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiUpdateDynamicAttributeRequest
*/
func (a *DynamicAttributesAPIService) UpdateDynamicAttribute(ctx context.Context) ApiUpdateDynamicAttributeRequest {
	return ApiUpdateDynamicAttributeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CreateOrUpdateOrDeleteDynamicAttributeResponse
func (a *DynamicAttributesAPIService) UpdateDynamicAttributeExecute(r ApiUpdateDynamicAttributeRequest) (*CreateOrUpdateOrDeleteDynamicAttributeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CreateOrUpdateOrDeleteDynamicAttributeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DynamicAttributesAPIService.UpdateDynamicAttribute")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/ECM/api/v5/updateDynamicAttribute"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.updateDynamicAttributeRequest == nil {
		return localVarReturnValue, nil, reportError("updateDynamicAttributeRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.updateDynamicAttributeRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
