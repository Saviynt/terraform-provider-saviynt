/*
 * Copyright (c) 2025 Saviynt Inc.
 * All Rights Reserved.
 *
 * This software is the confidential and proprietary information of
 * Saviynt Inc. ("Confidential Information"). You shall not disclose,
 * use, or distribute such Confidential Information except in accordance
 * with the terms of the license agreement you entered into with Saviynt.
 *
 * SAVIYNT MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
 * THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE, OR NON-INFRINGEMENT.
 */

/*
Dynamic Attribute Management API

Testing DynamicAttributesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package dynamicattributes

import (
	"context"
	"testing"

	openapiclient "github.com/saviynt/saviynt-api-go-client/dynamicattributes"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func Test_dynamicattribute_DynamicAttributeAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)
	ctx := context.Background()

	t.Run("Test CreateDynamicAttribute", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		system_name := "shaleenhuddle"
		endpoint := "sample-103"
		user_name := "admin"

		dynamicAttr1 := openapiclient.CreateDynamicAttributesInner{
			Attributename: "sample_dynamic_attribute_3",
			Requesttype:   "SERVICE ACCOUNT",
		}

		dynamicAttr2 := openapiclient.CreateDynamicAttributesInner{
			Attributename: "sample_dynamic_attribute_4",
			Requesttype:   "SERVICE ACCOUNT",
		}

		createReq := openapiclient.CreateDynamicAttributeRequest{
			Securitysystem:    system_name,
			Endpoint:          endpoint,
			Updateuser:        user_name,
			Dynamicattributes: []openapiclient.CreateDynamicAttributesInner{dynamicAttr1, dynamicAttr2},
		}

		req := apiClient.DynamicAttributesAPI.CreateDynamicAttribute(ctx).CreateDynamicAttributeRequest(createReq)
		resp, httpResp, err := req.Execute()
		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpResp.StatusCode)
		assert.Equal(t, "0", *resp.Errorcode)
		assert.Equal(t, "Success", *resp.Msg)
	})

}
