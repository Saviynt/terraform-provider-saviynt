/*
Saviynt API

API for managing jobs in Saviynt.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package job_control

import (
	"encoding/json"
)

// checks if the EcmJobAllOfValueMap type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EcmJobAllOfValueMap{}

// EcmJobAllOfValueMap struct for EcmJobAllOfValueMap
type EcmJobAllOfValueMap struct {
	OnFailure *string `json:"onFailure,omitempty"`
}

// NewEcmJobAllOfValueMap instantiates a new EcmJobAllOfValueMap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEcmJobAllOfValueMap() *EcmJobAllOfValueMap {
	this := EcmJobAllOfValueMap{}
	return &this
}

// NewEcmJobAllOfValueMapWithDefaults instantiates a new EcmJobAllOfValueMap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEcmJobAllOfValueMapWithDefaults() *EcmJobAllOfValueMap {
	this := EcmJobAllOfValueMap{}
	return &this
}

// GetOnFailure returns the OnFailure field value if set, zero value otherwise.
func (o *EcmJobAllOfValueMap) GetOnFailure() string {
	if o == nil || IsNil(o.OnFailure) {
		var ret string
		return ret
	}
	return *o.OnFailure
}

// GetOnFailureOk returns a tuple with the OnFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EcmJobAllOfValueMap) GetOnFailureOk() (*string, bool) {
	if o == nil || IsNil(o.OnFailure) {
		return nil, false
	}
	return o.OnFailure, true
}

// HasOnFailure returns a boolean if a field has been set.
func (o *EcmJobAllOfValueMap) HasOnFailure() bool {
	if o != nil && !IsNil(o.OnFailure) {
		return true
	}

	return false
}

// SetOnFailure gets a reference to the given string and assigns it to the OnFailure field.
func (o *EcmJobAllOfValueMap) SetOnFailure(v string) {
	o.OnFailure = &v
}

func (o EcmJobAllOfValueMap) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EcmJobAllOfValueMap) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OnFailure) {
		toSerialize["onFailure"] = o.OnFailure
	}
	return toSerialize, nil
}

type NullableEcmJobAllOfValueMap struct {
	value *EcmJobAllOfValueMap
	isSet bool
}

func (v NullableEcmJobAllOfValueMap) Get() *EcmJobAllOfValueMap {
	return v.value
}

func (v *NullableEcmJobAllOfValueMap) Set(val *EcmJobAllOfValueMap) {
	v.value = val
	v.isSet = true
}

func (v NullableEcmJobAllOfValueMap) IsSet() bool {
	return v.isSet
}

func (v *NullableEcmJobAllOfValueMap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEcmJobAllOfValueMap(val *EcmJobAllOfValueMap) *NullableEcmJobAllOfValueMap {
	return &NullableEcmJobAllOfValueMap{value: val, isSet: true}
}

func (v NullableEcmJobAllOfValueMap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEcmJobAllOfValueMap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


