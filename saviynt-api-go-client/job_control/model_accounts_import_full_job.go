/*
Saviynt API

API for managing jobs in Saviynt.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package job_control

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the AccountsImportFullJob type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountsImportFullJob{}

// AccountsImportFullJob struct for AccountsImportFullJob
type AccountsImportFullJob struct {
	BaseTrigger
	ValueMap *AccountsImportFullJobAllOfValueMap `json:"valueMap,omitempty"`
}

type _AccountsImportFullJob AccountsImportFullJob

// NewAccountsImportFullJob instantiates a new AccountsImportFullJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountsImportFullJob(triggername string, jobname string, jobgroup string, cronexpression string) *AccountsImportFullJob {
	this := AccountsImportFullJob{}
	this.Triggername = triggername
	this.Jobname = jobname
	this.Jobgroup = jobgroup
	this.Cronexpression = cronexpression
	return &this
}

// NewAccountsImportFullJobWithDefaults instantiates a new AccountsImportFullJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountsImportFullJobWithDefaults() *AccountsImportFullJob {
	this := AccountsImportFullJob{}
	return &this
}

// GetValueMap returns the ValueMap field value if set, zero value otherwise.
func (o *AccountsImportFullJob) GetValueMap() AccountsImportFullJobAllOfValueMap {
	if o == nil || IsNil(o.ValueMap) {
		var ret AccountsImportFullJobAllOfValueMap
		return ret
	}
	return *o.ValueMap
}

// GetValueMapOk returns a tuple with the ValueMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountsImportFullJob) GetValueMapOk() (*AccountsImportFullJobAllOfValueMap, bool) {
	if o == nil || IsNil(o.ValueMap) {
		return nil, false
	}
	return o.ValueMap, true
}

// HasValueMap returns a boolean if a field has been set.
func (o *AccountsImportFullJob) HasValueMap() bool {
	if o != nil && !IsNil(o.ValueMap) {
		return true
	}

	return false
}

// SetValueMap gets a reference to the given AccountsImportFullJobAllOfValueMap and assigns it to the ValueMap field.
func (o *AccountsImportFullJob) SetValueMap(v AccountsImportFullJobAllOfValueMap) {
	o.ValueMap = &v
}

func (o AccountsImportFullJob) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountsImportFullJob) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedBaseTrigger, errBaseTrigger := json.Marshal(o.BaseTrigger)
	if errBaseTrigger != nil {
		return map[string]interface{}{}, errBaseTrigger
	}
	errBaseTrigger = json.Unmarshal([]byte(serializedBaseTrigger), &toSerialize)
	if errBaseTrigger != nil {
		return map[string]interface{}{}, errBaseTrigger
	}
	if !IsNil(o.ValueMap) {
		toSerialize["valueMap"] = o.ValueMap
	}
	return toSerialize, nil
}

func (o *AccountsImportFullJob) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"triggername",
		"jobname",
		"jobgroup",
		"cronexpression",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAccountsImportFullJob := _AccountsImportFullJob{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAccountsImportFullJob)

	if err != nil {
		return err
	}

	*o = AccountsImportFullJob(varAccountsImportFullJob)

	return err
}

type NullableAccountsImportFullJob struct {
	value *AccountsImportFullJob
	isSet bool
}

func (v NullableAccountsImportFullJob) Get() *AccountsImportFullJob {
	return v.value
}

func (v *NullableAccountsImportFullJob) Set(val *AccountsImportFullJob) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountsImportFullJob) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountsImportFullJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountsImportFullJob(val *AccountsImportFullJob) *NullableAccountsImportFullJob {
	return &NullableAccountsImportFullJob{value: val, isSet: true}
}

func (v NullableAccountsImportFullJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountsImportFullJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
