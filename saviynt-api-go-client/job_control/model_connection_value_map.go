/*
Saviynt API

API for managing jobs in Saviynt.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package job_control

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConnectionValueMap type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectionValueMap{}

// ConnectionValueMap Key/value map of additional trigger parameters
type ConnectionValueMap struct {
	// One or more connection names
	Connectionname []string `json:"connectionname"`
}

type _ConnectionValueMap ConnectionValueMap

// NewConnectionValueMap instantiates a new ConnectionValueMap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionValueMap(connectionname []string) *ConnectionValueMap {
	this := ConnectionValueMap{}
	this.Connectionname = connectionname
	return &this
}

// NewConnectionValueMapWithDefaults instantiates a new ConnectionValueMap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionValueMapWithDefaults() *ConnectionValueMap {
	this := ConnectionValueMap{}
	return &this
}

// GetConnectionname returns the Connectionname field value
func (o *ConnectionValueMap) GetConnectionname() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Connectionname
}

// GetConnectionnameOk returns a tuple with the Connectionname field value
// and a boolean to check if the value has been set.
func (o *ConnectionValueMap) GetConnectionnameOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Connectionname, true
}

// SetConnectionname sets field value
func (o *ConnectionValueMap) SetConnectionname(v []string) {
	o.Connectionname = v
}

func (o ConnectionValueMap) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectionValueMap) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["connectionname"] = o.Connectionname
	return toSerialize, nil
}

func (o *ConnectionValueMap) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"connectionname",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnectionValueMap := _ConnectionValueMap{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConnectionValueMap)

	if err != nil {
		return err
	}

	*o = ConnectionValueMap(varConnectionValueMap)

	return err
}

type NullableConnectionValueMap struct {
	value *ConnectionValueMap
	isSet bool
}

func (v NullableConnectionValueMap) Get() *ConnectionValueMap {
	return v.value
}

func (v *NullableConnectionValueMap) Set(val *ConnectionValueMap) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionValueMap) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionValueMap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionValueMap(val *ConnectionValueMap) *NullableConnectionValueMap {
	return &NullableConnectionValueMap{value: val, isSet: true}
}

func (v NullableConnectionValueMap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionValueMap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


