/*
Saviynt API

API for managing jobs in Saviynt.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package job_control

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the BaseTrigger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseTrigger{}

// BaseTrigger struct for BaseTrigger
type BaseTrigger struct {
	// Unique name of the trigger
	Triggername string `json:"triggername"`
	// Name of the job associated with the trigger
	Jobname string `json:"jobname"`
	// Name of the job group associated with the trigger
	Jobgroup string `json:"jobgroup"`
	// Group classification for the trigger
	Triggergroup *string `json:"triggergroup,omitempty"`
	// Cron expression defining the schedule for the trigger
	Cronexpression string `json:"cronexpression"`
}

type _BaseTrigger BaseTrigger

// NewBaseTrigger instantiates a new BaseTrigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseTrigger(triggername string, jobname string, jobgroup string, cronexpression string) *BaseTrigger {
	this := BaseTrigger{}
	this.Triggername = triggername
	this.Jobname = jobname
	this.Jobgroup = jobgroup
	this.Cronexpression = cronexpression
	return &this
}

// NewBaseTriggerWithDefaults instantiates a new BaseTrigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseTriggerWithDefaults() *BaseTrigger {
	this := BaseTrigger{}
	return &this
}

// GetTriggername returns the Triggername field value
func (o *BaseTrigger) GetTriggername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Triggername
}

// GetTriggernameOk returns a tuple with the Triggername field value
// and a boolean to check if the value has been set.
func (o *BaseTrigger) GetTriggernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Triggername, true
}

// SetTriggername sets field value
func (o *BaseTrigger) SetTriggername(v string) {
	o.Triggername = v
}

// GetJobname returns the Jobname field value
func (o *BaseTrigger) GetJobname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Jobname
}

// GetJobnameOk returns a tuple with the Jobname field value
// and a boolean to check if the value has been set.
func (o *BaseTrigger) GetJobnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Jobname, true
}

// SetJobname sets field value
func (o *BaseTrigger) SetJobname(v string) {
	o.Jobname = v
}

// GetJobgroup returns the Jobgroup field value
func (o *BaseTrigger) GetJobgroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Jobgroup
}

// GetJobgroupOk returns a tuple with the Jobgroup field value
// and a boolean to check if the value has been set.
func (o *BaseTrigger) GetJobgroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Jobgroup, true
}

// SetJobgroup sets field value
func (o *BaseTrigger) SetJobgroup(v string) {
	o.Jobgroup = v
}

// GetTriggergroup returns the Triggergroup field value if set, zero value otherwise.
func (o *BaseTrigger) GetTriggergroup() string {
	if o == nil || IsNil(o.Triggergroup) {
		var ret string
		return ret
	}
	return *o.Triggergroup
}

// GetTriggergroupOk returns a tuple with the Triggergroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseTrigger) GetTriggergroupOk() (*string, bool) {
	if o == nil || IsNil(o.Triggergroup) {
		return nil, false
	}
	return o.Triggergroup, true
}

// HasTriggergroup returns a boolean if a field has been set.
func (o *BaseTrigger) HasTriggergroup() bool {
	if o != nil && !IsNil(o.Triggergroup) {
		return true
	}

	return false
}

// SetTriggergroup gets a reference to the given string and assigns it to the Triggergroup field.
func (o *BaseTrigger) SetTriggergroup(v string) {
	o.Triggergroup = &v
}

// GetCronexpression returns the Cronexpression field value
func (o *BaseTrigger) GetCronexpression() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cronexpression
}

// GetCronexpressionOk returns a tuple with the Cronexpression field value
// and a boolean to check if the value has been set.
func (o *BaseTrigger) GetCronexpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cronexpression, true
}

// SetCronexpression sets field value
func (o *BaseTrigger) SetCronexpression(v string) {
	o.Cronexpression = v
}

func (o BaseTrigger) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseTrigger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["triggername"] = o.Triggername
	toSerialize["jobname"] = o.Jobname
	toSerialize["jobgroup"] = o.Jobgroup
	if !IsNil(o.Triggergroup) {
		toSerialize["triggergroup"] = o.Triggergroup
	}
	toSerialize["cronexpression"] = o.Cronexpression
	return toSerialize, nil
}

func (o *BaseTrigger) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"triggername",
		"jobname",
		"jobgroup",
		"cronexpression",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBaseTrigger := _BaseTrigger{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBaseTrigger)

	if err != nil {
		return err
	}

	*o = BaseTrigger(varBaseTrigger)

	return err
}

type NullableBaseTrigger struct {
	value *BaseTrigger
	isSet bool
}

func (v NullableBaseTrigger) Get() *BaseTrigger {
	return v.value
}

func (v *NullableBaseTrigger) Set(val *BaseTrigger) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseTrigger(val *BaseTrigger) *NullableBaseTrigger {
	return &NullableBaseTrigger{value: val, isSet: true}
}

func (v NullableBaseTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
