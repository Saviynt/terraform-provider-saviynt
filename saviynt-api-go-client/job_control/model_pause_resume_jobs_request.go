/*
Saviynt API

API for managing jobs in Saviynt.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package job_control

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the PauseResumeJobsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PauseResumeJobsRequest{}

// PauseResumeJobsRequest Request body for pausing or resuming jobs
type PauseResumeJobsRequest struct {
	// Action to perform on the job (Pause or Resume)
	Action string `json:"action"`
	// Name of the trigger to pause or resume
	Triggername *string `json:"triggername,omitempty"`
	// Name of the job to pause or resume
	Jobname *string `json:"jobname,omitempty"`
}

type _PauseResumeJobsRequest PauseResumeJobsRequest

// NewPauseResumeJobsRequest instantiates a new PauseResumeJobsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPauseResumeJobsRequest(action string) *PauseResumeJobsRequest {
	this := PauseResumeJobsRequest{}
	this.Action = action
	return &this
}

// NewPauseResumeJobsRequestWithDefaults instantiates a new PauseResumeJobsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPauseResumeJobsRequestWithDefaults() *PauseResumeJobsRequest {
	this := PauseResumeJobsRequest{}
	return &this
}

// GetAction returns the Action field value
func (o *PauseResumeJobsRequest) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *PauseResumeJobsRequest) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *PauseResumeJobsRequest) SetAction(v string) {
	o.Action = v
}

// GetTriggername returns the Triggername field value if set, zero value otherwise.
func (o *PauseResumeJobsRequest) GetTriggername() string {
	if o == nil || IsNil(o.Triggername) {
		var ret string
		return ret
	}
	return *o.Triggername
}

// GetTriggernameOk returns a tuple with the Triggername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PauseResumeJobsRequest) GetTriggernameOk() (*string, bool) {
	if o == nil || IsNil(o.Triggername) {
		return nil, false
	}
	return o.Triggername, true
}

// HasTriggername returns a boolean if a field has been set.
func (o *PauseResumeJobsRequest) HasTriggername() bool {
	if o != nil && !IsNil(o.Triggername) {
		return true
	}

	return false
}

// SetTriggername gets a reference to the given string and assigns it to the Triggername field.
func (o *PauseResumeJobsRequest) SetTriggername(v string) {
	o.Triggername = &v
}

// GetJobname returns the Jobname field value if set, zero value otherwise.
func (o *PauseResumeJobsRequest) GetJobname() string {
	if o == nil || IsNil(o.Jobname) {
		var ret string
		return ret
	}
	return *o.Jobname
}

// GetJobnameOk returns a tuple with the Jobname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PauseResumeJobsRequest) GetJobnameOk() (*string, bool) {
	if o == nil || IsNil(o.Jobname) {
		return nil, false
	}
	return o.Jobname, true
}

// HasJobname returns a boolean if a field has been set.
func (o *PauseResumeJobsRequest) HasJobname() bool {
	if o != nil && !IsNil(o.Jobname) {
		return true
	}

	return false
}

// SetJobname gets a reference to the given string and assigns it to the Jobname field.
func (o *PauseResumeJobsRequest) SetJobname(v string) {
	o.Jobname = &v
}

func (o PauseResumeJobsRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PauseResumeJobsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	if !IsNil(o.Triggername) {
		toSerialize["triggername"] = o.Triggername
	}
	if !IsNil(o.Jobname) {
		toSerialize["jobname"] = o.Jobname
	}
	return toSerialize, nil
}

func (o *PauseResumeJobsRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPauseResumeJobsRequest := _PauseResumeJobsRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPauseResumeJobsRequest)

	if err != nil {
		return err
	}

	*o = PauseResumeJobsRequest(varPauseResumeJobsRequest)

	return err
}

type NullablePauseResumeJobsRequest struct {
	value *PauseResumeJobsRequest
	isSet bool
}

func (v NullablePauseResumeJobsRequest) Get() *PauseResumeJobsRequest {
	return v.value
}

func (v *NullablePauseResumeJobsRequest) Set(val *PauseResumeJobsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePauseResumeJobsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePauseResumeJobsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePauseResumeJobsRequest(val *PauseResumeJobsRequest) *NullablePauseResumeJobsRequest {
	return &NullablePauseResumeJobsRequest{value: val, isSet: true}
}

func (v NullablePauseResumeJobsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePauseResumeJobsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
