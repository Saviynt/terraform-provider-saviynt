/*
Saviynt API

API for managing jobs in Saviynt.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package job_control

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// TriggerItem - struct for TriggerItem
type TriggerItem struct {
	AccountsImportFullJob    *AccountsImportFullJob
	ApplicationDataImportJob *ApplicationDataImportJob
	EcmJob                   *EcmJob
	EcmSapUserJob            *EcmSapUserJob
	UserImportJob            *UserImportJob
	WSRetryJob               *WSRetryJob
}

// AccountsImportFullJobAsTriggerItem is a convenience function that returns AccountsImportFullJob wrapped in TriggerItem
func AccountsImportFullJobAsTriggerItem(v *AccountsImportFullJob) TriggerItem {
	return TriggerItem{
		AccountsImportFullJob: v,
	}
}

// ApplicationDataImportJobAsTriggerItem is a convenience function that returns ApplicationDataImportJob wrapped in TriggerItem
func ApplicationDataImportJobAsTriggerItem(v *ApplicationDataImportJob) TriggerItem {
	return TriggerItem{
		ApplicationDataImportJob: v,
	}
}

// EcmJobAsTriggerItem is a convenience function that returns EcmJob wrapped in TriggerItem
func EcmJobAsTriggerItem(v *EcmJob) TriggerItem {
	return TriggerItem{
		EcmJob: v,
	}
}

// EcmSapUserJobAsTriggerItem is a convenience function that returns EcmSapUserJob wrapped in TriggerItem
func EcmSapUserJobAsTriggerItem(v *EcmSapUserJob) TriggerItem {
	return TriggerItem{
		EcmSapUserJob: v,
	}
}

// UserImportJobAsTriggerItem is a convenience function that returns UserImportJob wrapped in TriggerItem
func UserImportJobAsTriggerItem(v *UserImportJob) TriggerItem {
	return TriggerItem{
		UserImportJob: v,
	}
}

// WSRetryJobAsTriggerItem is a convenience function that returns WSRetryJob wrapped in TriggerItem
func WSRetryJobAsTriggerItem(v *WSRetryJob) TriggerItem {
	return TriggerItem{
		WSRetryJob: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *TriggerItem) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AccountsImportFullJob
	err = newStrictDecoder(data).Decode(&dst.AccountsImportFullJob)
	if err == nil {
		jsonAccountsImportFullJob, _ := json.Marshal(dst.AccountsImportFullJob)
		if string(jsonAccountsImportFullJob) == "{}" { // empty struct
			dst.AccountsImportFullJob = nil
		} else {
			if err = validator.Validate(dst.AccountsImportFullJob); err != nil {
				dst.AccountsImportFullJob = nil
			} else {
				match++
			}
		}
	} else {
		dst.AccountsImportFullJob = nil
	}

	// try to unmarshal data into ApplicationDataImportJob
	err = newStrictDecoder(data).Decode(&dst.ApplicationDataImportJob)
	if err == nil {
		jsonApplicationDataImportJob, _ := json.Marshal(dst.ApplicationDataImportJob)
		if string(jsonApplicationDataImportJob) == "{}" { // empty struct
			dst.ApplicationDataImportJob = nil
		} else {
			if err = validator.Validate(dst.ApplicationDataImportJob); err != nil {
				dst.ApplicationDataImportJob = nil
			} else {
				match++
			}
		}
	} else {
		dst.ApplicationDataImportJob = nil
	}

	// try to unmarshal data into EcmJob
	err = newStrictDecoder(data).Decode(&dst.EcmJob)
	if err == nil {
		jsonEcmJob, _ := json.Marshal(dst.EcmJob)
		if string(jsonEcmJob) == "{}" { // empty struct
			dst.EcmJob = nil
		} else {
			if err = validator.Validate(dst.EcmJob); err != nil {
				dst.EcmJob = nil
			} else {
				match++
			}
		}
	} else {
		dst.EcmJob = nil
	}

	// try to unmarshal data into EcmSapUserJob
	err = newStrictDecoder(data).Decode(&dst.EcmSapUserJob)
	if err == nil {
		jsonEcmSapUserJob, _ := json.Marshal(dst.EcmSapUserJob)
		if string(jsonEcmSapUserJob) == "{}" { // empty struct
			dst.EcmSapUserJob = nil
		} else {
			if err = validator.Validate(dst.EcmSapUserJob); err != nil {
				dst.EcmSapUserJob = nil
			} else {
				match++
			}
		}
	} else {
		dst.EcmSapUserJob = nil
	}

	// try to unmarshal data into UserImportJob
	err = newStrictDecoder(data).Decode(&dst.UserImportJob)
	if err == nil {
		jsonUserImportJob, _ := json.Marshal(dst.UserImportJob)
		if string(jsonUserImportJob) == "{}" { // empty struct
			dst.UserImportJob = nil
		} else {
			if err = validator.Validate(dst.UserImportJob); err != nil {
				dst.UserImportJob = nil
			} else {
				match++
			}
		}
	} else {
		dst.UserImportJob = nil
	}

	// try to unmarshal data into WSRetryJob
	err = newStrictDecoder(data).Decode(&dst.WSRetryJob)
	if err == nil {
		jsonWSRetryJob, _ := json.Marshal(dst.WSRetryJob)
		if string(jsonWSRetryJob) == "{}" { // empty struct
			dst.WSRetryJob = nil
		} else {
			if err = validator.Validate(dst.WSRetryJob); err != nil {
				dst.WSRetryJob = nil
			} else {
				match++
			}
		}
	} else {
		dst.WSRetryJob = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AccountsImportFullJob = nil
		dst.ApplicationDataImportJob = nil
		dst.EcmJob = nil
		dst.EcmSapUserJob = nil
		dst.UserImportJob = nil
		dst.WSRetryJob = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TriggerItem)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TriggerItem)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TriggerItem) MarshalJSON() ([]byte, error) {
	if src.AccountsImportFullJob != nil {
		return json.Marshal(&src.AccountsImportFullJob)
	}

	if src.ApplicationDataImportJob != nil {
		return json.Marshal(&src.ApplicationDataImportJob)
	}

	if src.EcmJob != nil {
		return json.Marshal(&src.EcmJob)
	}

	if src.EcmSapUserJob != nil {
		return json.Marshal(&src.EcmSapUserJob)
	}

	if src.UserImportJob != nil {
		return json.Marshal(&src.UserImportJob)
	}

	if src.WSRetryJob != nil {
		return json.Marshal(&src.WSRetryJob)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TriggerItem) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AccountsImportFullJob != nil {
		return obj.AccountsImportFullJob
	}

	if obj.ApplicationDataImportJob != nil {
		return obj.ApplicationDataImportJob
	}

	if obj.EcmJob != nil {
		return obj.EcmJob
	}

	if obj.EcmSapUserJob != nil {
		return obj.EcmSapUserJob
	}

	if obj.UserImportJob != nil {
		return obj.UserImportJob
	}

	if obj.WSRetryJob != nil {
		return obj.WSRetryJob
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj TriggerItem) GetActualInstanceValue() interface{} {
	if obj.AccountsImportFullJob != nil {
		return *obj.AccountsImportFullJob
	}

	if obj.ApplicationDataImportJob != nil {
		return *obj.ApplicationDataImportJob
	}

	if obj.EcmJob != nil {
		return *obj.EcmJob
	}

	if obj.EcmSapUserJob != nil {
		return *obj.EcmSapUserJob
	}

	if obj.UserImportJob != nil {
		return *obj.UserImportJob
	}

	if obj.WSRetryJob != nil {
		return *obj.WSRetryJob
	}

	// all schemas are nil
	return nil
}

type NullableTriggerItem struct {
	value *TriggerItem
	isSet bool
}

func (v NullableTriggerItem) Get() *TriggerItem {
	return v.value
}

func (v *NullableTriggerItem) Set(val *TriggerItem) {
	v.value = val
	v.isSet = true
}

func (v NullableTriggerItem) IsSet() bool {
	return v.isSet
}

func (v *NullableTriggerItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTriggerItem(val *TriggerItem) *NullableTriggerItem {
	return &NullableTriggerItem{value: val, isSet: true}
}

func (v NullableTriggerItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTriggerItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
