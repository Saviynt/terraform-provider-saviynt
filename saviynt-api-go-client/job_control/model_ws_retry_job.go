/*
Saviynt API

API for managing jobs in Saviynt.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package job_control

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the WSRetryJob type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WSRetryJob{}

// WSRetryJob struct for WSRetryJob
type WSRetryJob struct {
	BaseTrigger
	Securitysystems []string `json:"securitysystems,omitempty"`
	Tasktypes       *string  `json:"tasktypes,omitempty"`
}

type _WSRetryJob WSRetryJob

// NewWSRetryJob instantiates a new WSRetryJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWSRetryJob(triggername string, jobname string, jobgroup string, cronexpression string) *WSRetryJob {
	this := WSRetryJob{}
	this.Triggername = triggername
	this.Jobname = jobname
	this.Jobgroup = jobgroup
	this.Cronexpression = cronexpression
	return &this
}

// NewWSRetryJobWithDefaults instantiates a new WSRetryJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWSRetryJobWithDefaults() *WSRetryJob {
	this := WSRetryJob{}
	return &this
}

// GetSecuritysystems returns the Securitysystems field value if set, zero value otherwise.
func (o *WSRetryJob) GetSecuritysystems() []string {
	if o == nil || IsNil(o.Securitysystems) {
		var ret []string
		return ret
	}
	return o.Securitysystems
}

// GetSecuritysystemsOk returns a tuple with the Securitysystems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WSRetryJob) GetSecuritysystemsOk() ([]string, bool) {
	if o == nil || IsNil(o.Securitysystems) {
		return nil, false
	}
	return o.Securitysystems, true
}

// HasSecuritysystems returns a boolean if a field has been set.
func (o *WSRetryJob) HasSecuritysystems() bool {
	if o != nil && !IsNil(o.Securitysystems) {
		return true
	}

	return false
}

// SetSecuritysystems gets a reference to the given []string and assigns it to the Securitysystems field.
func (o *WSRetryJob) SetSecuritysystems(v []string) {
	o.Securitysystems = v
}

// GetTasktypes returns the Tasktypes field value if set, zero value otherwise.
func (o *WSRetryJob) GetTasktypes() string {
	if o == nil || IsNil(o.Tasktypes) {
		var ret string
		return ret
	}
	return *o.Tasktypes
}

// GetTasktypesOk returns a tuple with the Tasktypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WSRetryJob) GetTasktypesOk() (*string, bool) {
	if o == nil || IsNil(o.Tasktypes) {
		return nil, false
	}
	return o.Tasktypes, true
}

// HasTasktypes returns a boolean if a field has been set.
func (o *WSRetryJob) HasTasktypes() bool {
	if o != nil && !IsNil(o.Tasktypes) {
		return true
	}

	return false
}

// SetTasktypes gets a reference to the given string and assigns it to the Tasktypes field.
func (o *WSRetryJob) SetTasktypes(v string) {
	o.Tasktypes = &v
}

func (o WSRetryJob) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WSRetryJob) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedBaseTrigger, errBaseTrigger := json.Marshal(o.BaseTrigger)
	if errBaseTrigger != nil {
		return map[string]interface{}{}, errBaseTrigger
	}
	errBaseTrigger = json.Unmarshal([]byte(serializedBaseTrigger), &toSerialize)
	if errBaseTrigger != nil {
		return map[string]interface{}{}, errBaseTrigger
	}
	if !IsNil(o.Securitysystems) {
		toSerialize["securitysystems"] = o.Securitysystems
	}
	if !IsNil(o.Tasktypes) {
		toSerialize["tasktypes"] = o.Tasktypes
	}
	return toSerialize, nil
}

func (o *WSRetryJob) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"triggername",
		"jobname",
		"jobgroup",
		"cronexpression",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWSRetryJob := _WSRetryJob{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWSRetryJob)

	if err != nil {
		return err
	}

	*o = WSRetryJob(varWSRetryJob)

	return err
}

type NullableWSRetryJob struct {
	value *WSRetryJob
	isSet bool
}

func (v NullableWSRetryJob) Get() *WSRetryJob {
	return v.value
}

func (v *NullableWSRetryJob) Set(val *WSRetryJob) {
	v.value = val
	v.isSet = true
}

func (v NullableWSRetryJob) IsSet() bool {
	return v.isSet
}

func (v *NullableWSRetryJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWSRetryJob(val *WSRetryJob) *NullableWSRetryJob {
	return &NullableWSRetryJob{value: val, isSet: true}
}

func (v NullableWSRetryJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWSRetryJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
