/*
Saviynt API

API for managing jobs in Saviynt.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package job_control

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// JobTriggerItem - struct for JobTriggerItem
type JobTriggerItem struct {
	AccountsImportIncrementalJob *AccountsImportIncrementalJob
	SchemaAccountJob             *SchemaAccountJob
	SchemaRoleJob                *SchemaRoleJob
	SchemaUserJob                *SchemaUserJob
}

// AccountsImportIncrementalJobAsJobTriggerItem is a convenience function that returns AccountsImportIncrementalJob wrapped in JobTriggerItem
func AccountsImportIncrementalJobAsJobTriggerItem(v *AccountsImportIncrementalJob) JobTriggerItem {
	return JobTriggerItem{
		AccountsImportIncrementalJob: v,
	}
}

// SchemaAccountJobAsJobTriggerItem is a convenience function that returns SchemaAccountJob wrapped in JobTriggerItem
func SchemaAccountJobAsJobTriggerItem(v *SchemaAccountJob) JobTriggerItem {
	return JobTriggerItem{
		SchemaAccountJob: v,
	}
}

// SchemaRoleJobAsJobTriggerItem is a convenience function that returns SchemaRoleJob wrapped in JobTriggerItem
func SchemaRoleJobAsJobTriggerItem(v *SchemaRoleJob) JobTriggerItem {
	return JobTriggerItem{
		SchemaRoleJob: v,
	}
}

// SchemaUserJobAsJobTriggerItem is a convenience function that returns SchemaUserJob wrapped in JobTriggerItem
func SchemaUserJobAsJobTriggerItem(v *SchemaUserJob) JobTriggerItem {
	return JobTriggerItem{
		SchemaUserJob: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *JobTriggerItem) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AccountsImportIncrementalJob
	err = newStrictDecoder(data).Decode(&dst.AccountsImportIncrementalJob)
	if err == nil {
		jsonAccountsImportIncrementalJob, _ := json.Marshal(dst.AccountsImportIncrementalJob)
		if string(jsonAccountsImportIncrementalJob) == "{}" { // empty struct
			dst.AccountsImportIncrementalJob = nil
		} else {
			if err = validator.Validate(dst.AccountsImportIncrementalJob); err != nil {
				dst.AccountsImportIncrementalJob = nil
			} else {
				match++
			}
		}
	} else {
		dst.AccountsImportIncrementalJob = nil
	}

	// try to unmarshal data into SchemaAccountJob
	err = newStrictDecoder(data).Decode(&dst.SchemaAccountJob)
	if err == nil {
		jsonSchemaAccountJob, _ := json.Marshal(dst.SchemaAccountJob)
		if string(jsonSchemaAccountJob) == "{}" { // empty struct
			dst.SchemaAccountJob = nil
		} else {
			if err = validator.Validate(dst.SchemaAccountJob); err != nil {
				dst.SchemaAccountJob = nil
			} else {
				match++
			}
		}
	} else {
		dst.SchemaAccountJob = nil
	}

	// try to unmarshal data into SchemaRoleJob
	err = newStrictDecoder(data).Decode(&dst.SchemaRoleJob)
	if err == nil {
		jsonSchemaRoleJob, _ := json.Marshal(dst.SchemaRoleJob)
		if string(jsonSchemaRoleJob) == "{}" { // empty struct
			dst.SchemaRoleJob = nil
		} else {
			if err = validator.Validate(dst.SchemaRoleJob); err != nil {
				dst.SchemaRoleJob = nil
			} else {
				match++
			}
		}
	} else {
		dst.SchemaRoleJob = nil
	}

	// try to unmarshal data into SchemaUserJob
	err = newStrictDecoder(data).Decode(&dst.SchemaUserJob)
	if err == nil {
		jsonSchemaUserJob, _ := json.Marshal(dst.SchemaUserJob)
		if string(jsonSchemaUserJob) == "{}" { // empty struct
			dst.SchemaUserJob = nil
		} else {
			if err = validator.Validate(dst.SchemaUserJob); err != nil {
				dst.SchemaUserJob = nil
			} else {
				match++
			}
		}
	} else {
		dst.SchemaUserJob = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AccountsImportIncrementalJob = nil
		dst.SchemaAccountJob = nil
		dst.SchemaRoleJob = nil
		dst.SchemaUserJob = nil

		return fmt.Errorf("data matches more than one schema in oneOf(JobTriggerItem)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(JobTriggerItem)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src JobTriggerItem) MarshalJSON() ([]byte, error) {
	if src.AccountsImportIncrementalJob != nil {
		return json.Marshal(&src.AccountsImportIncrementalJob)
	}

	if src.SchemaAccountJob != nil {
		return json.Marshal(&src.SchemaAccountJob)
	}

	if src.SchemaRoleJob != nil {
		return json.Marshal(&src.SchemaRoleJob)
	}

	if src.SchemaUserJob != nil {
		return json.Marshal(&src.SchemaUserJob)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *JobTriggerItem) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.AccountsImportIncrementalJob != nil {
		return obj.AccountsImportIncrementalJob
	}

	if obj.SchemaAccountJob != nil {
		return obj.SchemaAccountJob
	}

	if obj.SchemaRoleJob != nil {
		return obj.SchemaRoleJob
	}

	if obj.SchemaUserJob != nil {
		return obj.SchemaUserJob
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj JobTriggerItem) GetActualInstanceValue() interface{} {
	if obj.AccountsImportIncrementalJob != nil {
		return *obj.AccountsImportIncrementalJob
	}

	if obj.SchemaAccountJob != nil {
		return *obj.SchemaAccountJob
	}

	if obj.SchemaRoleJob != nil {
		return *obj.SchemaRoleJob
	}

	if obj.SchemaUserJob != nil {
		return *obj.SchemaUserJob
	}

	// all schemas are nil
	return nil
}

type NullableJobTriggerItem struct {
	value *JobTriggerItem
	isSet bool
}

func (v NullableJobTriggerItem) Get() *JobTriggerItem {
	return v.value
}

func (v *NullableJobTriggerItem) Set(val *JobTriggerItem) {
	v.value = val
	v.isSet = true
}

func (v NullableJobTriggerItem) IsSet() bool {
	return v.isSet
}

func (v *NullableJobTriggerItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobTriggerItem(val *JobTriggerItem) *NullableJobTriggerItem {
	return &NullableJobTriggerItem{value: val, isSet: true}
}

func (v NullableJobTriggerItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobTriggerItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
