/*
Saviynt API

API for managing jobs in Saviynt.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package job_control

import (
	"encoding/json"
)

// checks if the SchemaUserJobAllOfValueMap type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaUserJobAllOfValueMap{}

// SchemaUserJobAllOfValueMap struct for SchemaUserJobAllOfValueMap
type SchemaUserJobAllOfValueMap struct {
	SchemaFileNames *string `json:"schemaFileNames,omitempty"`
}

// NewSchemaUserJobAllOfValueMap instantiates a new SchemaUserJobAllOfValueMap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaUserJobAllOfValueMap() *SchemaUserJobAllOfValueMap {
	this := SchemaUserJobAllOfValueMap{}
	return &this
}

// NewSchemaUserJobAllOfValueMapWithDefaults instantiates a new SchemaUserJobAllOfValueMap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaUserJobAllOfValueMapWithDefaults() *SchemaUserJobAllOfValueMap {
	this := SchemaUserJobAllOfValueMap{}
	return &this
}

// GetSchemaFileNames returns the SchemaFileNames field value if set, zero value otherwise.
func (o *SchemaUserJobAllOfValueMap) GetSchemaFileNames() string {
	if o == nil || IsNil(o.SchemaFileNames) {
		var ret string
		return ret
	}
	return *o.SchemaFileNames
}

// GetSchemaFileNamesOk returns a tuple with the SchemaFileNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaUserJobAllOfValueMap) GetSchemaFileNamesOk() (*string, bool) {
	if o == nil || IsNil(o.SchemaFileNames) {
		return nil, false
	}
	return o.SchemaFileNames, true
}

// HasSchemaFileNames returns a boolean if a field has been set.
func (o *SchemaUserJobAllOfValueMap) HasSchemaFileNames() bool {
	if o != nil && !IsNil(o.SchemaFileNames) {
		return true
	}

	return false
}

// SetSchemaFileNames gets a reference to the given string and assigns it to the SchemaFileNames field.
func (o *SchemaUserJobAllOfValueMap) SetSchemaFileNames(v string) {
	o.SchemaFileNames = &v
}

func (o SchemaUserJobAllOfValueMap) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaUserJobAllOfValueMap) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SchemaFileNames) {
		toSerialize["schemaFileNames"] = o.SchemaFileNames
	}
	return toSerialize, nil
}

type NullableSchemaUserJobAllOfValueMap struct {
	value *SchemaUserJobAllOfValueMap
	isSet bool
}

func (v NullableSchemaUserJobAllOfValueMap) Get() *SchemaUserJobAllOfValueMap {
	return v.value
}

func (v *NullableSchemaUserJobAllOfValueMap) Set(val *SchemaUserJobAllOfValueMap) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaUserJobAllOfValueMap) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaUserJobAllOfValueMap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaUserJobAllOfValueMap(val *SchemaUserJobAllOfValueMap) *NullableSchemaUserJobAllOfValueMap {
	return &NullableSchemaUserJobAllOfValueMap{value: val, isSet: true}
}

func (v NullableSchemaUserJobAllOfValueMap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaUserJobAllOfValueMap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
