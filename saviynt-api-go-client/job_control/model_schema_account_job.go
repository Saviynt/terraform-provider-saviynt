/*
Saviynt API

API for managing jobs in Saviynt.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package job_control

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SchemaAccountJob type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaAccountJob{}

// SchemaAccountJob struct for SchemaAccountJob
type SchemaAccountJob struct {
	BaseJobTrigger
	ValueMap *SchemaAccountJobAllOfValueMap `json:"valueMap,omitempty"`
}

type _SchemaAccountJob SchemaAccountJob

// NewSchemaAccountJob instantiates a new SchemaAccountJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaAccountJob(name string, jobName string, jobGroup string, group string, cronExp string) *SchemaAccountJob {
	this := SchemaAccountJob{}
	this.Name = name
	this.JobName = jobName
	this.JobGroup = jobGroup
	this.Group = group
	this.CronExp = cronExp
	return &this
}

// NewSchemaAccountJobWithDefaults instantiates a new SchemaAccountJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaAccountJobWithDefaults() *SchemaAccountJob {
	this := SchemaAccountJob{}
	return &this
}

// GetValueMap returns the ValueMap field value if set, zero value otherwise.
func (o *SchemaAccountJob) GetValueMap() SchemaAccountJobAllOfValueMap {
	if o == nil || IsNil(o.ValueMap) {
		var ret SchemaAccountJobAllOfValueMap
		return ret
	}
	return *o.ValueMap
}

// GetValueMapOk returns a tuple with the ValueMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaAccountJob) GetValueMapOk() (*SchemaAccountJobAllOfValueMap, bool) {
	if o == nil || IsNil(o.ValueMap) {
		return nil, false
	}
	return o.ValueMap, true
}

// HasValueMap returns a boolean if a field has been set.
func (o *SchemaAccountJob) HasValueMap() bool {
	if o != nil && !IsNil(o.ValueMap) {
		return true
	}

	return false
}

// SetValueMap gets a reference to the given SchemaAccountJobAllOfValueMap and assigns it to the ValueMap field.
func (o *SchemaAccountJob) SetValueMap(v SchemaAccountJobAllOfValueMap) {
	o.ValueMap = &v
}

func (o SchemaAccountJob) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaAccountJob) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	serializedBaseJobTrigger, errBaseJobTrigger := json.Marshal(o.BaseJobTrigger)
	if errBaseJobTrigger != nil {
		return map[string]interface{}{}, errBaseJobTrigger
	}
	errBaseJobTrigger = json.Unmarshal([]byte(serializedBaseJobTrigger), &toSerialize)
	if errBaseJobTrigger != nil {
		return map[string]interface{}{}, errBaseJobTrigger
	}
	if !IsNil(o.ValueMap) {
		toSerialize["valueMap"] = o.ValueMap
	}
	return toSerialize, nil
}

func (o *SchemaAccountJob) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"jobName",
		"jobGroup",
		"group",
		"cronExp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSchemaAccountJob := _SchemaAccountJob{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSchemaAccountJob)

	if err != nil {
		return err
	}

	*o = SchemaAccountJob(varSchemaAccountJob)

	return err
}

type NullableSchemaAccountJob struct {
	value *SchemaAccountJob
	isSet bool
}

func (v NullableSchemaAccountJob) Get() *SchemaAccountJob {
	return v.value
}

func (v *NullableSchemaAccountJob) Set(val *SchemaAccountJob) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaAccountJob) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaAccountJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaAccountJob(val *SchemaAccountJob) *NullableSchemaAccountJob {
	return &NullableSchemaAccountJob{value: val, isSet: true}
}

func (v NullableSchemaAccountJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaAccountJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


