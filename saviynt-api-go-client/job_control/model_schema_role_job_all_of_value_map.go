/*
Saviynt API

API for managing jobs in Saviynt.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package job_control

import (
	"encoding/json"
)

// checks if the SchemaRoleJobAllOfValueMap type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaRoleJobAllOfValueMap{}

// SchemaRoleJobAllOfValueMap struct for SchemaRoleJobAllOfValueMap
type SchemaRoleJobAllOfValueMap struct {
	SchemaFileNames *string `json:"schemaFileNames,omitempty"`
}

// NewSchemaRoleJobAllOfValueMap instantiates a new SchemaRoleJobAllOfValueMap object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaRoleJobAllOfValueMap() *SchemaRoleJobAllOfValueMap {
	this := SchemaRoleJobAllOfValueMap{}
	return &this
}

// NewSchemaRoleJobAllOfValueMapWithDefaults instantiates a new SchemaRoleJobAllOfValueMap object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaRoleJobAllOfValueMapWithDefaults() *SchemaRoleJobAllOfValueMap {
	this := SchemaRoleJobAllOfValueMap{}
	return &this
}

// GetSchemaFileNames returns the SchemaFileNames field value if set, zero value otherwise.
func (o *SchemaRoleJobAllOfValueMap) GetSchemaFileNames() string {
	if o == nil || IsNil(o.SchemaFileNames) {
		var ret string
		return ret
	}
	return *o.SchemaFileNames
}

// GetSchemaFileNamesOk returns a tuple with the SchemaFileNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaRoleJobAllOfValueMap) GetSchemaFileNamesOk() (*string, bool) {
	if o == nil || IsNil(o.SchemaFileNames) {
		return nil, false
	}
	return o.SchemaFileNames, true
}

// HasSchemaFileNames returns a boolean if a field has been set.
func (o *SchemaRoleJobAllOfValueMap) HasSchemaFileNames() bool {
	if o != nil && !IsNil(o.SchemaFileNames) {
		return true
	}

	return false
}

// SetSchemaFileNames gets a reference to the given string and assigns it to the SchemaFileNames field.
func (o *SchemaRoleJobAllOfValueMap) SetSchemaFileNames(v string) {
	o.SchemaFileNames = &v
}

func (o SchemaRoleJobAllOfValueMap) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaRoleJobAllOfValueMap) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SchemaFileNames) {
		toSerialize["schemaFileNames"] = o.SchemaFileNames
	}
	return toSerialize, nil
}

type NullableSchemaRoleJobAllOfValueMap struct {
	value *SchemaRoleJobAllOfValueMap
	isSet bool
}

func (v NullableSchemaRoleJobAllOfValueMap) Get() *SchemaRoleJobAllOfValueMap {
	return v.value
}

func (v *NullableSchemaRoleJobAllOfValueMap) Set(val *SchemaRoleJobAllOfValueMap) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaRoleJobAllOfValueMap) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaRoleJobAllOfValueMap) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaRoleJobAllOfValueMap(val *SchemaRoleJobAllOfValueMap) *NullableSchemaRoleJobAllOfValueMap {
	return &NullableSchemaRoleJobAllOfValueMap{value: val, isSet: true}
}

func (v NullableSchemaRoleJobAllOfValueMap) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaRoleJobAllOfValueMap) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
