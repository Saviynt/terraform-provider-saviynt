/*
Saviynt API

API for managing jobs in Saviynt.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package job_control

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PauseResumeJobRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PauseResumeJobRequest{}

// PauseResumeJobRequest Request body for pausing or resuming a job
type PauseResumeJobRequest struct {
	// Name of the trigger to pause or resume
	Triggername string `json:"triggername"`
}

type _PauseResumeJobRequest PauseResumeJobRequest

// NewPauseResumeJobRequest instantiates a new PauseResumeJobRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPauseResumeJobRequest(triggername string) *PauseResumeJobRequest {
	this := PauseResumeJobRequest{}
	this.Triggername = triggername
	return &this
}

// NewPauseResumeJobRequestWithDefaults instantiates a new PauseResumeJobRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPauseResumeJobRequestWithDefaults() *PauseResumeJobRequest {
	this := PauseResumeJobRequest{}
	return &this
}

// GetTriggername returns the Triggername field value
func (o *PauseResumeJobRequest) GetTriggername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Triggername
}

// GetTriggernameOk returns a tuple with the Triggername field value
// and a boolean to check if the value has been set.
func (o *PauseResumeJobRequest) GetTriggernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Triggername, true
}

// SetTriggername sets field value
func (o *PauseResumeJobRequest) SetTriggername(v string) {
	o.Triggername = v
}

func (o PauseResumeJobRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PauseResumeJobRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["triggername"] = o.Triggername
	return toSerialize, nil
}

func (o *PauseResumeJobRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"triggername",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPauseResumeJobRequest := _PauseResumeJobRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPauseResumeJobRequest)

	if err != nil {
		return err
	}

	*o = PauseResumeJobRequest(varPauseResumeJobRequest)

	return err
}

type NullablePauseResumeJobRequest struct {
	value *PauseResumeJobRequest
	isSet bool
}

func (v NullablePauseResumeJobRequest) Get() *PauseResumeJobRequest {
	return v.value
}

func (v *NullablePauseResumeJobRequest) Set(val *PauseResumeJobRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePauseResumeJobRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePauseResumeJobRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePauseResumeJobRequest(val *PauseResumeJobRequest) *NullablePauseResumeJobRequest {
	return &NullablePauseResumeJobRequest{value: val, isSet: true}
}

func (v NullablePauseResumeJobRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePauseResumeJobRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


