/*
Saviynt API

API for managing jobs in Saviynt.

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package job_control

import (
	"bytes"
	"encoding/json"
	"fmt"
)

// checks if the BaseJobTrigger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BaseJobTrigger{}

// BaseJobTrigger struct for BaseJobTrigger
type BaseJobTrigger struct {
	// Unique name of the trigger
	Name string `json:"name"`
	// Name of the job associated with the trigger
	JobName string `json:"jobName"`
	// Name of the job group associated with the trigger
	JobGroup string `json:"jobGroup"`
	// Group classification
	Group string `json:"group"`
	// Cron expression defining the schedule for the trigger
	CronExp string `json:"cronExp"`
}

type _BaseJobTrigger BaseJobTrigger

// NewBaseJobTrigger instantiates a new BaseJobTrigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseJobTrigger(name string, jobName string, jobGroup string, group string, cronExp string) *BaseJobTrigger {
	this := BaseJobTrigger{}
	this.Name = name
	this.JobName = jobName
	this.JobGroup = jobGroup
	this.Group = group
	this.CronExp = cronExp
	return &this
}

// NewBaseJobTriggerWithDefaults instantiates a new BaseJobTrigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseJobTriggerWithDefaults() *BaseJobTrigger {
	this := BaseJobTrigger{}
	return &this
}

// GetName returns the Name field value
func (o *BaseJobTrigger) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BaseJobTrigger) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BaseJobTrigger) SetName(v string) {
	o.Name = v
}

// GetJobName returns the JobName field value
func (o *BaseJobTrigger) GetJobName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JobName
}

// GetJobNameOk returns a tuple with the JobName field value
// and a boolean to check if the value has been set.
func (o *BaseJobTrigger) GetJobNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobName, true
}

// SetJobName sets field value
func (o *BaseJobTrigger) SetJobName(v string) {
	o.JobName = v
}

// GetJobGroup returns the JobGroup field value
func (o *BaseJobTrigger) GetJobGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JobGroup
}

// GetJobGroupOk returns a tuple with the JobGroup field value
// and a boolean to check if the value has been set.
func (o *BaseJobTrigger) GetJobGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JobGroup, true
}

// SetJobGroup sets field value
func (o *BaseJobTrigger) SetJobGroup(v string) {
	o.JobGroup = v
}

// GetGroup returns the Group field value
func (o *BaseJobTrigger) GetGroup() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *BaseJobTrigger) GetGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *BaseJobTrigger) SetGroup(v string) {
	o.Group = v
}

// GetCronExp returns the CronExp field value
func (o *BaseJobTrigger) GetCronExp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CronExp
}

// GetCronExpOk returns a tuple with the CronExp field value
// and a boolean to check if the value has been set.
func (o *BaseJobTrigger) GetCronExpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CronExp, true
}

// SetCronExp sets field value
func (o *BaseJobTrigger) SetCronExp(v string) {
	o.CronExp = v
}

func (o BaseJobTrigger) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BaseJobTrigger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["jobName"] = o.JobName
	toSerialize["jobGroup"] = o.JobGroup
	toSerialize["group"] = o.Group
	toSerialize["cronExp"] = o.CronExp
	return toSerialize, nil
}

func (o *BaseJobTrigger) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"jobName",
		"jobGroup",
		"group",
		"cronExp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBaseJobTrigger := _BaseJobTrigger{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBaseJobTrigger)

	if err != nil {
		return err
	}

	*o = BaseJobTrigger(varBaseJobTrigger)

	return err
}

type NullableBaseJobTrigger struct {
	value *BaseJobTrigger
	isSet bool
}

func (v NullableBaseJobTrigger) Get() *BaseJobTrigger {
	return v.value
}

func (v *NullableBaseJobTrigger) Set(val *BaseJobTrigger) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseJobTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseJobTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseJobTrigger(val *BaseJobTrigger) *NullableBaseJobTrigger {
	return &NullableBaseJobTrigger{value: val, isSet: true}
}

func (v NullableBaseJobTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseJobTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
